{  "openapi": "3.0.1",  "info": {    "title": "STEP REST API V2",    "description": "<h1>About</h1><p>The STEP REST API V2 provides read and write access to a set of core STEP objects using the HTTP operations GET, PUT, POST, PATCH and DELETE.</p><h1>Resource Representation</h1><p>With the exception of a few resource operations for retrieving and uploading binary data, all request and response bodies are JSON, compliant with the schema documented here.</p><h1>Context and Workspace</h1><p>All requests are handled in a specific STEP context and workspace and both can be specified via query parameters available for all resource operations. A context must always be specified while requests per default will be handled in the &quot;Main&quot; workspace.</p><h1>Polymorphism</h1><p>In STEP, attributes, reference types and data container types can all be either single- or multivalued. The STEP REST API V2 uses polymorphism to address this complexity with resources that include values, references and data containers specified to produce and consume a common &quot;abstract&quot; supertype that always will be one of either the single- or multivalued subtype.<br/>As an example, the GET /entities/{id}/values/{attributeId} resource operation is specified to return a &quot;Value&quot; but as evident from the model, the &quot;Value&quot; will always be &quot;oneOf&quot; either &quot;SingleValue&quot;, that has a &quot;value&quot; property for which the value is an object, or &quot;MultiValue&quot;, that has a &quot;values&quot; property for which the value is an array.<br/>Clients are advised to use the presence or absence of the plural array property (&quot;values&quot;, &quot;references&quot; and &quot;dataContainers&quot;) to determine the concrete type.</p><h1>Authentication</h1><p>The REST API is protected by HTTP Basic Authentication or if OAuth2-based authentication is enabled (SaaS customers only), by Bearer Authentication. With Basic Authentication, user name and password are supplied with each request and it is therefore highly recommended to only use the API in conjunction with HTTPS. For more information about OAuth2-based authentication for SaaS customers, please see the STEP Authentication Guide.</p><h1>Versioning</h1><p>The STEP REST API V2 is versioned using semantic versioning. Stibo Systems reserve the right to make non-breaking, minor / patch changes in any release without warning and clients must be coded / configured to be 'tolerant' and capable of handling such changes.</p><p>Examples of breaking, major changes:</p><ul><li>Renaming of a property</li><li>Removal of a property</li><li>Property type change</li><li>Addition of new property required for write operations</li><li>Marking existing property as required for write operations</li><li>Removal of resource or resource operation</li><li>Materially different behavior for existing resource operation</li></ul><p>Examples of non-breaking, minor / patch changes:</p><ul><li>Addition of new properties in request responses</li><li>Addition of new query parameter not required for write operations</li><li>Addition of new resource or resource operation</li><li>Bug fixes that do not change the schema or resource operations as described here</li><li>Inclusion of a response body for resource operations specified to return a 200 response with no body</li><li>Change of response &quot;Model&quot; / &quot;schema&quot; to type extending the previously specified type</li><li>Renaming a &quot;Model&quot; / &quot;schema&quot; type</li></ul><p>In addition, error message texts may change without warning within the same version. Client program logic should not depend upon the message content.</p><h1>Error Handling</h1><p>The STEP REST API V2 responds with standard HTTP status codes, with 2** responses indicating a success, 4** responses indicating a client error and 5** indicating a server error. Notice that this specification does not specify common error responses like 500 (internal server error) or 401 (unauthorized) for the individual resource operations. Clients should however be capable of handling such responses.</p><p>Error responses have a JSON response body (see Error schema below) containing HTTP status code information in addition to a message providing details about the error. As mentioned above, client program logic should not depend upon the message content.</p><p>The specific status codes used in the API are:</p><ul><li>200 (OK): Success, response may or may not have a body</li><li>201 (Created): Entity successfully created, response may or may not have a body</li><li>400 (Bad request): The server cannot or will not process the request due to an apparent client error</li><li>401 (Unauthorized): Returned only in relation to failed authentication</li><li>404 (Not Found): Returned only in relation to objects specified via path parameters (variable parts of the URL). If STEP objects referenced in request bodies or via query parameters cannot be found, the response will be 400.</li><li>429 (Too Many Requests): Clients are per default limited to 100 requests per second. Returned if the rate limit is exceeded.</li><li>500 (Internal Server Error): Unexpected error (could potentially cover an issue that rightfully should be a 400)</li></ul>",    "version": "1.3.0"  },  "servers": [    {      "url": "/restapiv2"    }  ],  "security": [    {  "basicAuth": [],  "bearerAuth": []}  ],  "paths": {    "/assets": {      "post": {        "tags": [          "Assets"        ],        "summary": "Creates a new asset object with autogenerated ID",        "description": "Operation for creating a new asset object with autogenerated ID. Object type and at least one parent classification must be specified in the request body. Further, an auto ID pattern must be configured for the object type. An \"id\" must not be supplied in the request body. Supplied \"contentMetadata\" will be ignored.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Asset"              },              "example": {                "name": "ACX-3562",                "objectType": "ProductImage",                "classifications": [                  "ProductImageRoot"                ],                "values": {                  "AssetKeywords": {                    "values": [                      {                        "value": "TV"                      },                      {                        "value": "Television"                      }                    ]                  }                }              }            }          }        },        "responses": {          "201": {            "description": "Asset object successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Asset"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an auto ID pattern is not configured for the specified object type, if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/search": {      "post": {        "tags": [          "Assets"        ],        "summary": "Search for / query assets",        "description": "Operation for querying assets. Resource operation will return a maximum of 1000 results. Notice that while the query can be made arbitrarily complex with multiple levels of nested AND and OR conditions, such complex queries will not perform well.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Query"              },              "example": {                "condition": {                  "conditionType": "and",                  "conditions": [                    {                      "conditionType": "simplebelow",                      "topNodeId": "I-Level2-13",                      "topNodeType": "classification"                    },                    {                      "conditionType": "objecttype",                      "objectType": "ProductImage"                    }                  ]                }              }            }          }        },        "responses": {          "200": {            "description": "Array of query results as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/QueryResult"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns the asset with the specified ID / key value",        "description": "Operation for retrieving information about a specific asset object. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Notice that the response does not contain asset content (binary data). Use GET /assets/{id}/content to retrieve the binary data.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The asset with the specified ID / key value",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Asset"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Assets"        ],        "summary": "Deletes the asset with the specified ID / key value",        "description": "Operation for deleting a specific asset. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Operation can only be invoked in editable workspaces and will if successful move the asset to the recycle bin.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Asset successfully deleted (moved to recycle bin)"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the asset cannot be deleted due to constraints like the existence of references pointing to the asset, if invalid context or workspace information is supplied or if the operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "Assets"        ],        "summary": "Partially updates an asset",        "description": "Operation for updating multiple properties with a single request. The asset to update can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. Contrary to the PUT /assets/{id} replace operation, this operation will only modify data present in the supplied request body.<br/>For both single and multivalued attributes, if a value representation is present in the request body, the existing value will be overwritten. Notice however that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause a value update to be ignored.<br/>For single valued reference types, existing references will be replaced with those provided in the request body. For multivalued reference types, if references in the request body match existing references, these will be replaced. Otherwise references in the request body will be added (i.e. existing references not in the request body will not be removed). As with values, if the property \"contextLocal\" is supplied with the value \"false\" for a reference, the update will be ignored.<br/>For asset classifications (the classifications that the asset is linked into), this resource operation will only add classifications and not remove existing ones not in the request body.<br/>This resource operation does not allow for the asset object type to be updated and also, supplied \"contentMetadata\" will be ignored. If an ID is supplied in the request body, it must match the ID of the asset identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset to update. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Asset"              },              "example": {                "classifications": [                  "ProductImageRoot"                ],                "values": {                  "AssetKeywords": {                    "values": [                      {                        "value": "TV"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Asset object successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Asset"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Assets"        ],        "summary": "Creates or replaces asset with known ID",        "description": "Operation for replacing an existing asset or creating a new asset with known ID. To avoid accidental replacement of existing assets, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and an asset with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body. Object type and at least one parent classification must always be specified in the request body. For the replace case, the asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. A STEP ID is required for creating a new asset via this resource operation and a 400 response will therefore be returned if a \"keyId\" is supplied and the object does not exist in advance. If an ID is supplied in the request body, it must match the ID of the asset identified via the URL. Supplied \"contentMetadata\" will be ignored.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the asset may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset to replace. If supplied, a key value should be supplied for the \"id\" path parameter. Cannot be used in combination with \"allow-overwrite=true\".",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Asset"              },              "example": {                "name": "ACX-3562",                "objectType": "ProductImage",                "classifications": [                  "ProductImageRoot"                ],                "values": {                  "AssetKeywords": {                    "values": [                      {                        "value": "TV"                      },                      {                        "value": "Television"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Asset object successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Asset"                }              }            }          },          "201": {            "description": "Asset object successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Asset"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an asset with the specified ID already exists and the value for the query parameter \"allow-overwrite\" is \"false\", if a \"keyId\" is supplied and \"allow-overwrite\" is \"true\", if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/approval-status": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns the approval status of the asset with the specified ID / key value",        "description": "Operation for retrieving the approval status of an asset. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to get the approval status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Asset approval status",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/approve": {      "post": {        "tags": [          "Assets"        ],        "summary": "Approves the asset with the specified ID / key value",        "description": "Operation for approving an asset. The operation can only be invoked in the Main workspace and a 400 response will be returned if the operation is invoked in another workspace. A 400 response is also returned if the asset could not be approved, for instance due to a constraint (e.g. parent classfications not present in Approved) or due to the approval being rejected by a business condition. The asset to approve can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset to approve",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Asset successfully approved. Notice that the asset may only have been partially approved. In this case the response will hold information about the part objects that could not be synchronized to the Approved workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalResponse"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the operation is invoked in a workspace different from Main, if the approval could not be performed or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/content": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns asset content for the asset with the specified ID / key value",        "description": "Operation for retrieving asset content (binary data). The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. For images, a converted version of the content can be obtained by supplying the ID of an image conversion configuration for the \"conversion-configuration-id\" query parameter.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to get the content",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "conversion-configuration-id",            "description": "ID of a pre-configured image conversion configuration",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200" : {            "description" : "Binary data for the asset with the specified ID / key value",            "content" : {              "application/octet-stream" : {                "schema" : {                  "type" : "string",                  "format" : "binary"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if invalid image conversion configuration information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Assets"        ],        "summary": "Replaces asset content",        "description": "Operation for replacing the binary data content for an asset. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. An optional file name can be supplied via the \"fileName\" query parameter.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to replace the content",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "fileName",            "description": "Optional file name for the supplied binary data",            "in": "query",            "schema": {              "type": "string",              "default": "unknown"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody" : {          "content" : {            "application/octet-stream" : {              "schema" : {                "type" : "string",                "format" : "binary"              }            }          }        },        "responses": {          "200": {            "description": "Asset content successfully replaced"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/incoming-references/{referenceTypeId}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns stream of incoming references of the specified type",        "description": "Returns an array of incoming references (IncomingReferenceEntry) of the specified type as a stream. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of incoming references of the specified type as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/IncomingReferenceEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/references/{referenceTypeId}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns reference(s) of the specified type",        "description": "Returns local reference(s) of the specified type owned by the asset. Response will either be an instance of SingleReference or MultiReference depending on whether the reference type is multivalued. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Either a MultiReference or SingleReference depending on whether the specified reference type is multivalued",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Reference"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/references/{referenceTypeId}/{targetId}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns a specific reference",        "description": "Returns the local reference (ReferenceEntry) of specified type from specified asset to specified target. The asset that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the target object can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "A reference (ReferenceEntry) of specified type from specified asset to specified target",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Assets"        ],        "summary": "Replaces a reference",        "description": "Replaces the specified reference. If a locally defined reference to the same target already exists or if the reference type is single-valued and a locally defined reference from the source already exists, the \"allow-overwrite\" query parameter must be set to \"true\" in order for the existing reference to be replaced. The asset that owns / will own the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key. Notice that if \"target\" or \"targetType\" is supplied in the request body, the values must match the reference type and the STEP ID of the target specified in the URL. If the property \"contextLocal\" is supplied with the value \"false\", the update will be ignored.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset that should own the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the desired reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns / will own the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether existing references may be overwritten. This includes references of the same type to the same target and for single-valued reference types, references of the same type to any target. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/ReferenceEntry"              },              "examples": {                "bodyWithMetadataExample": {                  "summary": "Body with reference metadata",                  "value": {                    "values": {                      "Quantity": {                        "value": {                          "value": "7"                        }                      }                    }                  }                },                "bodyWithoutMetadataExample": {                  "summary": "Body without reference metadata",                  "value": {                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated reference (ReferenceEntry). Returned when a local reference to the target existed in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "201": {            "description": "The created reference (ReferenceEntry). Returned when a local reference to the target did not exist in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a/the reference exists and value for the query parameter \"allow-overwrite\" is \"false\", if the reference cannot be successfully created / updated based on information provided in the request body, if invalid context or workspace information is supplied, if operation is invoked in a terminated workspace or if \"target\" or \"targetType\" is supplied and the values do not match the target ID and reference type specified in the URL.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type or target cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Assets"        ],        "summary": "Deletes the reference",        "description": "Deletes the specified reference. Notice that it is only possible to delete references that are defined locally (\"contextLocal\": true). The asset that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the target object can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Reference successfully deleted"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the reference cannot be deleted due to a constraint, if an attempt is made to delete a reference that is not defined locally or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/references/{referenceTypeId}/{targetId}/values/{attributeId}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns the value for a reference metadata attribute",        "description": "Returns the value for the specified attribute for the specified local reference. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The asset that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the target object can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Assets"        ],        "summary": "Replaces the value for a reference metadata attribute",        "description": "Operation for replacing the value of an attribute on a local reference. It is only possible to replace values on references that are defined locally (\"contextLocal\": true). Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The asset that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued LOV based attribute",                  "value": {                    "value": {                      "valueId": "Y"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute",                  "value": {                    "values": [                      {                        "value": "094457"                      },                      {                        "value": "094486"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied, if an attempt is made to update a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Assets"        ],        "summary": "Deletes the value for a reference metadata attribute",        "description": "Operation for deleting the value of an attribute on a reference. Notice that it is only possible to delete non-calculated values on references that are defined locally (\"contextLocal\": true). The asset that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset owning the reference for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied, if an attempt is made to delete a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/values/{attributeId}": {      "get": {        "tags": [          "Assets"        ],        "summary": "Returns the value for an asset attribute",        "description": "Returns the value for the specified attribute. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to retrieve the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Assets"        ],        "summary": "Replaces the value for an asset attribute",        "description": "Operation for replacing an asset attribute value. Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to replace the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueLOVExample": {                  "summary": "A value for a single-valued LOV based attribute",                  "value": {                    "value": {                      "valueId": "BK"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute with unit",                  "value": {                    "values": [                      {                        "value": "4000",                        "unit": "px"                      },                      {                        "value": "400",                        "unit": "px"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Assets"        ],        "summary": "Deletes the value for an asset attribute",        "description": "Operation for deleting an asset attribute value. Notice that it is only possible to delete non-calculated, locally defined values. The asset can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the asset for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the asset. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified asset or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/assets/{id}/approve-delete": {        "post": {          "tags": [            "Assets"          ],          "summary": "Approve deletes the asset with the specified ID",          "description": "Operation for approve deleting an asset. A 400 response is also returned if the asset could not be approve deleted.",          "parameters": [            {              "name": "id",              "description": "ID of the asset to approve delete",              "in": "path",              "required": true,              "schema": {                "type": "string"              }            },            {              "$ref": "#/components/parameters/context"            },            {              "$ref": "#/components/parameters/workspace"            }          ],          "responses": {			"200": {			  "description": "Asset successfully approve deleted."			},			"400": {			"description": "Returned if asset could not be approve deleted",			"content": {			  "application/json": {			    "schema": {			      "$ref": "#/components/schemas/Error"			    }			  }			}			},			"404": {			"description": "If the specified asset cannot be found",			"content": {			  "application/json": {			    "schema": {			      "$ref": "#/components/schemas/Error"			    }			  }			}			}          }        }    },	"/assets/{id}/purge": {		"post": {		  "tags": [		    "Assets"		  ],		  "summary": "Purges the asset with the specified ID from recycle bin",		  "description": "Operation for purging a specific asset from the recycle bin. Operation can only be invoked if the asset is already approve deleted.",		  "parameters": [		    {		      "name": "id",		      "description": "ID of the asset to purge",		      "in": "path",		      "required": true,		      "schema": {		        "type": "string"		      }		    },		    {		      "$ref": "#/components/parameters/context"		    },		    {		      "$ref": "#/components/parameters/workspace"		    }		  ],		  "responses": {		    "200": {		      "description": "Asset successfully purged from recycle bin."		    },		    "400": {		      "description": "Error caused by client. Returned if, for instance, the asset is not approve deleted",		      "content": {		        "application/json": {		          "schema": {		            "$ref": "#/components/schemas/Error"		          }		        }		      }		    },		    "404": {		      "description": "If the specified asset cannot be found",		      "content": {		        "application/json": {		          "schema": {		            "$ref": "#/components/schemas/Error"		          }		        }		      }		    }		  }		}	},    "/attributes/{id}": {      "get": {        "tags": [          "Attributes"        ],        "summary": "Returns the attribute with the specified ID",        "description": "Operation for retrieving information about a specific attribute object",        "parameters": [          {            "name": "id",            "description": "ID of the attribute for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The attribute with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Attribute"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-processes/{id}": {      "get": {        "tags": [          "Background Processes"        ],        "summary": "Returns the background process with the specified ID",        "description": "Operation for retrieving information about a specific background process instance",        "parameters": [          {            "name": "id",            "description": "ID of the background process for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The background process with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/BackgroundProcess"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-processes/{id}/execution-report": {      "get": {        "tags": [          "Background Processes"        ],        "summary": "Returns a streamed array of execution report entries (ExecutionReportEntry)",        "description": "Operation for retrieving the execution report for a specific background process as a streamed array of execution report entries (ExecutionReportEntry)",        "parameters": [          {            "name": "id",            "description": "ID of the background process for which to retrieve the execution report",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Stream of execution report entries (ExecutionReportEntry) for the background process with the specified ID",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/ExecutionReportEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-processes/{id}/attachments": {      "get": {        "tags": [          "Background Processes"        ],        "summary": "Returns information about available background process attachments",        "description": "Operation for retrieving information about available attachments for a specific background process instance",        "parameters": [          {            "name": "id",            "description": "ID of the background process for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The background process attachments metadata",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/BackgroundProcessAttachmentMetadata"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-processes/{id}/attachments/{attachmentId}": {      "get": {        "tags": [          "Background Processes"        ],        "summary": "Returns attachment metadata for a specific attachment",        "description": "Operation for retrieving an attachment metadata object for a specific attachment. Should only be called for succeeded background processes.",        "parameters": [          {            "name": "id",            "description": "ID of the background process for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attachmentId",            "description": "ID of the attachment",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The attachment metadata",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/BackgroundProcessAttachmentMetadata"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process or attachment cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-processes/{id}/attachments/{attachmentId}/content": {      "get": {        "tags": [          "Background Processes"        ],        "summary": "Returns the background process attachment content",        "description": "Operation for downloading attachment content for a specific background process attachment",        "parameters": [          {            "name": "id",            "description": "ID of the background process for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attachmentId",            "description": "ID of the attachment",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Binary data for the background process attachment with the specified ID",            "content": {              "application/octet-stream": {                "schema": {                  "type": "string",                  "format": "binary"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process or attachment cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-process-types": {      "get": {        "tags": [          "Background Process Types"        ],        "summary": "Returns the available background process types",        "description": "Operation for retrieving an array of simple background process type representations for all background process types",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Array of background process type representations",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/BackgroundProcessType"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/background-process-types/{typeId}/processes": {      "get": {        "tags": [          "Background Process Types"        ],        "summary": "Returns background process IDs for the specified background process type",        "description": "Operation for retrieving background process IDs for a specific background process type. Can be filtered on process status.",        "parameters": [          {            "name": "typeId",            "description": "Background process type ID",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "name": "status",            "description": "Background process status filter",            "in": "query",            "required": false,            "schema": {              "type": "string",              "enum": ["waiting", "running", "succeeded", "completedwitherrors", "failed", "suspended", "aborted"]            }          }        ],        "responses": {          "200": {            "description": "Array of background process IDs as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace or status information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified background process type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications": {      "post": {        "tags": [          "Classifications"        ],        "summary": "Creates a new classification object with autogenerated ID",        "description": "Operation for creating a new classification object with autogenerated ID. Object type and a parent classification must be specified in the request body. Further, an auto ID pattern must be configured for the object type. An \"id\" must not be supplied in the request body.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Classification"              },              "example": {                "name": "LCD TVs",                "objectType": "WebLevel2",                "parent": "I-WebLevel1-2",                "values": {                  "Description": {                    "value": {                      "value": "Best TVs on the market"                    }                  }                },                "attributeLinks": [                  {                    "attribute": "RechargingTime"                  },                  {                    "attribute": "3D"                  }                ]              }            }          }        },        "responses": {          "201": {            "description": "Classification created successfully",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Classification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an auto ID pattern is not configured for the specified object type, if the specified object type is not valid below the specified parent, if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/search": {      "post": {        "tags": [          "Classifications"        ],        "summary": "Search for / query classifications",        "description": "Operation for querying classifications. Resource operation will return a maximum of 1000 results. Notice that while the query can be made arbitrarily complex with multiple levels of nested AND and OR conditions, such complex queries will not perform well.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Query"              },              "example": {                "condition": {                  "conditionType": "and",                  "conditions": [                    {                      "conditionType": "simplebelow",                      "topNodeId": "I-Level2-13",                      "topNodeType": "classification"                    },                    {                      "conditionType": "objecttype",                      "objectType": "WebCategory"                    }                  ]                }              }            }          }        },        "responses": {          "200": {            "description": "Array of query results as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/QueryResult"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns the classification with the specified ID / key value",        "description": "Operation for retrieving information about a specific classification object. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The classification with the specified ID / key value",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Classification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Classifications"        ],        "summary": "Deletes the classification with the specified ID / key value",        "description": "Operation for deleting a specific classification. Operation can only be invoked in editable workspaces and will if successful move the classification to the recycle bin. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Classification successfully deleted (moved to recycle bin)"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the classification cannot be deleted due to constraints like the classification having children or the existence of references pointing to the classification, if invalid context or workspace information is supplied or if the operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "Classifications"        ],        "summary": "Partially updates a classification",        "description": "Operation for updating multiple properties with a single request. The classification to update can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. Contrary to the PUT /classifications/{id} replace operation, this operation will only modify data present in the supplied request body.<br/>For both single and multivalued attributes, if a value representation is present in the request body, the existing value will be overwritten. Notice however that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause a value update to be ignored.<br/>For single valued reference types (incl. classification product link types owned by the classification side), existing references will be replaced with those provided in the request body. For multivalued reference types, if references in the request body match existing references, these will be replaced. Otherwise references in the request body will be added (i.e. existing references not in the request body will not be removed). As with values, if the property \"contextLocal\" is supplied with the value \"false\" for a reference, the update will be ignored.<br/>If \"parent\" information is supplied, the classification will be moved below the specified parent given that it differs from the current.<br/>As with references, supplied attribute links will either be added or will replace existing links.<br/>This resource operation does not allow for the classification object type to be updated. If an ID is supplied in the request body, it must match the ID of the classification identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification to update. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Classification"              },              "example": {                "name": "Appliances",                "parent": "WC-1124",                "values": {                  "SearchTerms": {                    "values": [                      {                        "value": "appliance"                      },                      {                        "value": "kitchen"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Classification object successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Classification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Classifications"        ],        "summary": "Creates or replaces classification with known ID",        "description": "Operation for replacing an existing classification or creating a new classification with known ID. To avoid accidental replacement of existing classifications, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and a classification with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body. Object type and parent must always be specified in the request body. For the replace case, the classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. A STEP ID is required for creating a new classification via this resource operation and a 400 response will therefore be returned if a \"keyId\" is supplied and the object does not exist in advance. If an ID is supplied in the request body, it must match the ID of the classification identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the classification may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification to replace. If supplied, a key value should be supplied for the \"id\" path parameter. Cannot be used in combination with \"allow-overwrite=true\".",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Classification"              },              "example": {                "name": "Appliances",                "objectType": "WebsiteCategoryLvl2",                "parent": "WC-1124",                "values": {                  "SearchTerms": {                    "values": [                      {                        "value": "appliance"                      },                      {                        "value": "kitchen"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Classification object successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Classification"                }              }            }          },          "201": {            "description": "Classification object successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Classification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a classification with the specified ID already exists and the value for the query parameter \"allow-overwrite\" is \"false\", if a \"keyId\" is supplied and \"allow-overwrite\" is \"true\", if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/approval-status": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns the approval status of the classification with the specified ID / key value",        "description": "Operation for retrieving the approval status of a classification. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to get the approval status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Classification approval status",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/approve": {      "post": {        "tags": [          "Classifications"        ],        "summary": "Approves the classification with the specified ID / key value",        "description": "Operation for approving a classification. The operation can only be invoked in the Main workspace and a 400 response will be returned if the operation is invoked in another workspace. A 400 response is also returned if the classification could not be approved, for instance due to a constraint (e.g. parent not present in Approved) or due to the approval being rejected by a business condition. The classification to approve can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification to approve",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Classification successfully approved. Notice that the classification may only have been partially approved. In this case the response will hold information about the part objects that could not be synchronized to the Approved workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalResponse"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the operation is invoked in a workspace different from Main, if the approval could not be performed or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/assets": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns a streamed unsorted array of IDs for assets linked to the classification",        "description": "Returns a streamed unsorted array of IDs for assets directly below the specified classification. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve asset information",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "A streamed unsorted array of IDs for assets linked into the specified classification",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/children": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns a streamed unsorted array of IDs for classification children",        "description": "Returns a streamed unsorted array of IDs for classifications directly below the specified classification. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve children information",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "A streamed unsorted array of IDs for classifications directly below the specified classification",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/incoming-references/{referenceTypeId}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns stream of incoming references of the specified type",        "description": "Returns an array of incoming references (IncomingReferenceEntry) of the specified type as a stream. Notice that this resource covers both \"cross references\" and  \"classification product links\" owned by the classification side. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "An array of incoming references of the specified type as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/IncomingReferenceEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/references/{referenceTypeId}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns reference(s) of the specified type",        "description": "Returns local reference(s) of the specified type owned by the classification. Response will either be an instance of SingleReference or MultiReference depending on whether the reference type is multivalued. Notice that this resource covers both \"cross references\" and  \"classification product links\" owned by the classification side and that the latter when seen from the classification side always will be multivalued. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "Either a MultiReference or SingleReference depending on whether the specified reference type is multivalued (\"classification product links\" will when seen from the classification side always be multivalued)",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Reference"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/references/{referenceTypeId}/{targetId}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns a specific reference",        "description": "Returns the local reference (ReferenceEntry) of specified type from specified classification to specified target. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the classification side. The classification that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "A reference (ReferenceEntry) of specified type from specified classification to specified target",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Classifications"        ],        "summary": "Replaces a reference",        "description": "Replaces the specified reference. If a locally defined reference to the same target already exists or if the reference type is single-valued and a locally defined reference from the source already exists, the \"allow-overwrite\" query parameter must be set to \"true\" in order for the existing reference to be replaced. The classification that owns / will own the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key. Notice that if \"target\" or \"targetType\" is supplied in the request body, the values must match the reference type and the STEP ID of the target specified in the URL. If the property \"contextLocal\" is supplied with the value \"false\", the update will be ignored. This resource covers both \"cross references\" and \"classification product links\" owned by the classification side.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification that should own the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the desired reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns / will own the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether existing references may be overwritten. This includes references of the same type to the same target and for single-valued reference types, references of the same type to any target. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/ReferenceEntry"              },              "examples": {                "bodyWithMetadataExample": {                  "summary": "Body with reference metadata",                  "value": {                    "values": {                      "Quantity": {                        "value": {                          "value": "7"                        }                      }                    }                  }                },                "bodyWithoutMetadataExample": {                  "summary": "Body without reference metadata",                  "value": {                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated reference (ReferenceEntry). Returned when a local reference to the target existed in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "201": {            "description": "The created reference (ReferenceEntry). Returned when a local reference to the target did not exist in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a/the reference exists and value for the query parameter \"allow-overwrite\" is \"false\", if the reference cannot be successfully created / updated based on information provided in the request body, if invalid context or workspace information is supplied, if operation is invoked in a terminated workspace or if \"target\" or \"targetType\" is supplied and the values do not match the target ID and reference type specified in the URL.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type or target cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Classifications"        ],        "summary": "Deletes the reference",        "description": "Deletes the specified reference. Notice that it is only possible to delete references that are defined locally (\"contextLocal\": true). Further notice that this resource covers both \"cross references\" and \"classification product links\" owned by the classification side. The classification that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Reference successfully deleted"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the reference cannot be deleted due to a constraint, if an attempt is made to delete a reference that is not defined locally or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/references/{referenceTypeId}/{targetId}/values/{attributeId}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns the value for a reference metadata attribute",        "description": "Returns the value for the specified attribute for the specified local reference. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the classification side. The classification that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Classifications"        ],        "summary": "Replaces the value for a reference metadata attribute",        "description": "Operation for replacing the value of an attribute on a local reference. It is only possible to replace values on references that are defined locally (\"contextLocal\": true). Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. Further notice that this resource covers values on both \"cross references\" and \"classification product links\" owned by the classification side. The classification that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued LOV based attribute",                  "value": {                    "value": {                      "valueId": "Y"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute",                  "value": {                    "values": [                      {                        "value": "094457"                      },                      {                        "value": "094486"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied, if an attempt is made to update a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Classifications"        ],        "summary": "Deletes the value for a reference metadata attribute",        "description": "Operation for deleting the value of an attribute on a local reference. Notice that it is only possible to delete non-calculated values on references that are defined locally (\"contextLocal\": true). Further notice that this resource covers values on both \"cross references\" and \"classification product links\" owned by the classification side. The classification that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification owning the reference for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied, if an attempt is made to delete a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/values/{attributeId}": {      "get": {        "tags": [          "Classifications"        ],        "summary": "Returns the value for a classification attribute",        "description": "Returns the value for the specified attribute. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to retrieve the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Classifications"        ],        "summary": "Replaces the value for a classification attribute",        "description": "Operation for replacing a classification attribute value. Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to replace the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued attribute",                  "value": {                    "value": {                      "value": "IC-45781"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued LOV based attribute",                  "value": {                    "values": [                      {                        "valueId": "DE"                      },                      {                        "valueId": "US"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Classifications"        ],        "summary": "Deletes the value for a classification attribute",        "description": "Operation for deleting a classification attribute value. Notice that it is only possible to delete non-calculated, locally defined values. The classification can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the classification for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the classification. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified classification or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/approve-delete": {      "post": {        "tags": [          "Classifications"        ],        "summary":"Approves deletes the classification with the specified ID",        "description":"Operation for approve deleting a classification.  A 400 response is also returned if the classification could not be approve deleted.",        "parameters": [          {            "name":"id",            "description":"ID of the classification to approve delete",            "in":"path",            "required":true,            "schema": {              "type":"string"            }          },          {            "$ref":"#/components/parameters/context"          },          {            "$ref":"#/components/parameters/workspace"          }        ],        "responses": {          "200":{            "description":"Classification successfully approved deleted."          },          "400":{            "description":"Returned if classification could not be approve deleted.",            "content":{              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404": {            "description":"If the specified classification cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/classifications/{id}/purge": {      "post": {        "tags": [          "Classifications"        ],        "summary":"Purges the classification with the specified ID from recycle bin",        "description":"Operation for purging a specific classification. Operation can only be invoked in approve deleted in the recycle bin.",        "parameters": [          {            "name":"id",            "description":"ID of the classification to purge",            "in":"path",            "required":true,            "schema": {              "type":"string"            }          },          {            "$ref":"#/components/parameters/context"          },          {            "$ref":"#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description":"Classification successfully purged from recycle bin."          },          "400": {            "description":"Error caused by client. Returned if, for instance, the classification is not approve deleted.",            "content":{              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404": {            "description":"If the specified classification cannot be found",            "content":{              "application/json":{                "schema":{                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/data-container-types/{id}": {      "get": {        "tags": [          "Data Container Types"        ],        "summary": "Returns the data container type with the specified ID",        "description": "Operation for retrieving information about a specific data container type object",        "parameters": [          {            "name": "id",            "description": "ID of the data container type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The data container type with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/DataContainerType"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified data container type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/data-type-groups/{id}": {      "get": {        "tags": [          "Data Type Groups"        ],        "summary": "Returns the data type group with the specified ID",        "description": "Operation for retrieving information about a specific data type group (a.k.a. \"attribute group\") object",        "parameters": [          {            "name": "id",            "description": "ID of the data type group for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The data type group (a.k.a. \"attribute group\") with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/DataTypeGroup"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified data type group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities": {      "post": {        "tags": [          "Entities"        ],        "summary": "Creates a new entity object with autogenerated ID",        "description": "Operation for creating a new entity object with autogenerated ID. Object type and a parent entity must be specified in the request body. Further, an auto ID pattern must be configured for the object type. An \"id\" must not be supplied in the request body.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Entity"              },              "example": {                "name": "Macy, Charles",                "objectType": "Contact",                "parent": "ContactsRoot",                "values": {                  "GivenNames": {                    "value": {                      "value": "Charles"                    }                  },                  "Surname": {                    "value": {                      "value": "Macy"                    }                  }                },                "dataContainers": {                  "ContactInfo": {                    "dataContainers": [                      {                        "values": {                          "Type": {                            "value": {                              "valueId": "MAIL"                            }                          },                          "Value": {                            "value": {                              "value": "charles.macy@wtorg.com"                            }                          }                        },                        "references": {                          "MailServerCountry": {                            "reference": {                              "target": "Denmark",                              "values": {                                "ServerSuffix": {                                  "value": {                                    "value": "wtorg.com"                                  }                                }                              }                            }                          }                        }                      },                      {                        "values": {                          "Type": {                            "value": {                              "valueId": "MAIL"                            }                          },                          "Value": {                            "value": {                              "value": "charlesmacy@gmail.com"                            }                          }                        }                      }                    ]                  }                }              }            }          }        },        "responses": {          "201": {            "description": "Entity created successfully",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Entity"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an auto ID pattern is not configured for the specified object type, if the specified object type is not valid below the specified parent, if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/find-similar": {      "post": {        "tags": [          "Entities"        ],        "summary": "Performs a find similar operation for entities",        "description": "Operation for finding entities similar to the request. Find similar is a search based on a matching algorithm Setup Entity. The behavior of the web service is defined by a Web Service Configuration Setup Entity. Operation will return a maximum of 1000 results.",        "parameters": [          {            "name": "WebserviceConfigurationID",            "description": "ID of the Find Similar Webservice Setup Entity that holds the configuration",            "in": "query",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/FindSimilarEntitiesRequest"              }            }          }        },        "responses": {          "200": {            "description": "Find similar result with execution report and similar entities",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/FindSimilarEntitiesResponse"                }              }            }          },          "400": {            "description": "Error caused by client or misconfiguration. Returned if, for instance, invalid context/workspace/endpoint information is supplied, endpoint not correct configured or if the entire operation fails.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "403": {            "description": "If the authorisation used for the request does not permit action(s) required for performing find similar.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "406": {            "description": "If a Business Action configured on the Web Service Endpoint fails for whatever reason.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "412": {            "description": "If a Business Condition configured on the Web Service Endpoint rejects the incoming Entity.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/match-and-merge": {      "post": {        "tags": [          "Entities"        ],        "summary": "Performs a Match An Merge operation",        "description": "Operation for create or update of Merge Golden Records. \n\nThe behavior of the web service is defined by a Web Service Configuration Setup Entity. \n\nInput is a list of maximum 1000 entities with a consumer decided correlation ID. Output includes an export of the entities that were updated, paired with the correlation ID, which allow the caller to determine which input record was matched to which output.",        "parameters": [          {            "name": "WebserviceConfigurationID",            "description": "ID of the Match and Merge Webservice Setup Entity that holds the configuration",            "in": "query",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "type": "array",                "items": {                  "$ref": "#/components/schemas/MatchAndMergeRecordIn"                }              }            }          }        },        "responses": {          "200": {            "description": "Match And Merge result with general execution report",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/MatchAndMergeResponse"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context/workspace information is supplied or if the entire operation fails.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified Matching Web Service end point cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/search": {      "post": {        "tags": [          "Entities"        ],        "summary": "Search for / query entities",        "description": "Operation for querying entities. Resource operation will return a maximum of 1000 results. Notice that while the query can be made arbitrarily complex with multiple levels of nested AND and OR conditions, such complex queries will not perform well.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Query"              },              "example": {                "condition": {                  "conditionType": "and",                  "conditions": [                    {                      "conditionType": "simplebelow",                      "topNodeId": "I-Level2-13",                      "topNodeType": "entity"                    },                    {                      "conditionType": "objecttype",                      "objectType": "Customer"                    }                  ]                }              }            }          }        },        "responses": {          "200": {            "description": "Array of query results as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/QueryResult"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns the entity with the specified ID / key value",        "description": "Operation for retrieving information about a specific entity object. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The entity with the specified ID / key value",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Entity"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Entities"        ],        "summary": "Deletes the entity with the specified ID",        "description": "Operation for deleting a specific entity. Operation can only be invoked in editable workspaces and will if successful move the entity to the recycle bin or remove it completely depending on whether the entity object type is workspace revised. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Entity successfully deleted (moved to recycle bin or removed)"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the entity cannot be deleted due to constraints like e.g. the entity having children or the existence of references pointing to the entity, if invalid context or workspace information is supplied or if the operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "Entities"        ],        "summary": "Partially updates an entity",        "description": "Operation for updating multiple properties with a single request. The entity to update can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. Contrary to the PUT /entities/{id} replace operation, this operation will only modify data present in the supplied request body.<br/>For both single and multivalued attributes, if a value representation is present in the request body, the existing value will be overwritten. Notice however that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause a value update to be ignored.<br/>For single valued reference types, existing references will be replaced with those provided in the request body. For multivalued reference types, if references in the request body match existing references, these will be replaced. Otherwise references in the request body will be added (i.e. existing references not in the request body will not be removed). As with values, if the property \"contextLocal\" is supplied with the value \"false\" for a reference, the update will be ignored.<br/>If \"parent\" information is supplied, the entity will be moved below the specified parent given that it differs from the current.<br/>Data containers can only be updated if auto IDs are configured for the data container type. For single valued data container types, existing data container objects will be replaced with the data container object in the request body. For multi valued data container types, data container objects in the request body will be added if the data container type does not have a key definition. If a data container key definition is present data container objects in the request body will replace existing data containers that matches the data container key, otherwise new data container objects will be added to the multi valued data container.<br/>This resource operation does not allow for the entity object type to be updated. If an ID is supplied in the request body, it must match the ID of the entity identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity to update. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Entity"              },              "example": {                "values": {                  "FirstName": {                    "value": {                      "value": "John"                    }                  },                  "LastName": {                    "value": {                      "value": "Smith"                    }                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Entity object successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Entity"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Entities"        ],        "summary": "Creates or replaces entity with known ID",        "description": "Operation for replacing an existing entity or creating a new entity with known ID. To avoid accidental replacement of existing entities, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and an entity with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body. Object type and parent must always be specified in the request body. For the replace case, the entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. A STEP ID is required for creating a new entity via this resource operation and a 400 response will therefore be returned if a \"keyId\" is supplied and the object does not exist in advance. If an ID is supplied in the request body, it must match the ID of the entity identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the entity may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity to replace. If supplied, a key value should be supplied for the \"id\" path parameter. Cannot be used in combination with \"allow-overwrite=true\".",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Entity"              },              "example": {                "objectType": "Customer",                "parent": "Customers",                "values": {                  "FirstName": {                    "value": {                      "value": "John"                    }                  },                  "LastName": {                    "value": {                      "value": "Smith"                    }                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Entity object successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Entity"                }              }            }          },          "201": {            "description": "Entity object successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Entity"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an entity with the specified ID already exists and the value for the query parameter \"allow-overwrite\" is \"false\", if a \"keyId\" is supplied and \"allow-overwrite\" is \"true\", if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/approval-status": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns the approval status of the entity with the specified ID / key value",        "description": "Operation for retrieving the approval status of an entity. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Notice that a 400 response is returned if the operation is invoked for a non-workspace revisable entity.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to get the approval status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Entity approval status",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if the operation is invoked for a non-workspace revisable entity.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/approve": {      "post": {        "tags": [          "Entities"        ],        "summary": "Approves the entity with the specified ID / key value",        "description": "Operation for approving an entity. The operation can only be invoked in the Main workspace and a 400 response will be returned if the operation is invoked in another workspace. A 400 response is also returned if the entity could not be approved, for instance due to a constraint (e.g. parent not present in Approved), due to the approval being rejected by a business condition or due to the entity not being workspace revisable. The entity to approve can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity to approve",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Entity successfully approved. Notice that the entity may only have been partially approved. In this case the response will hold information about the part objects that could not be synchronized to the Approved workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalResponse"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the operation is invoked in a workspace different from Main, if the entity is not workspace revisable, if the approval for some other reason could not be performed or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/children": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns a streamed unsorted array of IDs for entity children",        "description": "Returns a streamed unsorted array of IDs for entities directly below the specified entity. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to retrieve children information",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "A streamed unsorted array of IDs for entities directly below the specified entity",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/data-containers/{dataContainerTypeId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns data container(s) of the specified type",        "description": "Returns data container(s) of the specified type. Response will either be a SingleDataContainer or a MultiDataContainer depending on whether the data container type is multivalued. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity to retrieve data container(s) for",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "dataContainerTypeId",            "description": "ID of the data container type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "Either a MultiDataContainer or SingleDataContainer depending on whether the specified data container type is multivalued",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/DataContainer"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or data container type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/incoming-references/{referenceTypeId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns stream of incoming references of the specified type",        "description": "Returns an array of incoming references (IncomingReferenceEntry) of the specified type as a stream. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of incoming references of the specified type as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/IncomingReferenceEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/references/{referenceTypeId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns reference(s) of the specified type",        "description": "Returns local reference(s) of the specified type owned by the entity. Response will either be a SingleReference or a MultiReference depending on whether the reference type is multivalued. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "Either a MultiReference or SingleReference depending on whether the specified reference type is multivalued",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Reference"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/references/{referenceTypeId}/{targetId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns a specific reference",        "description": "Returns the local reference (ReferenceEntry) of specified type from specified entity to specified target. The entity that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "A reference (ReferenceEntry) of specified type from specified entity to specified target",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Entities"        ],        "summary": "Replaces a reference",        "description": "Replaces the specified reference. If a locally defined reference to the same target already exists or if the reference type is single-valued and a locally defined reference from the source already exists, the \"allow-overwrite\" query parameter must be set to \"true\" in order for the existing reference to be replaced. The entity that owns / will own the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key. Notice that if \"target\" or \"targetType\" is supplied in the request body, the values must match the reference type and the STEP ID of the target specified in the URL. If the property \"contextLocal\" is supplied with the value \"false\", the update will be ignored.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity that should own the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the desired reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity owns / will own the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether existing references may be overwritten. This includes references of the same type to the same target and for single-valued reference types, references of the same type to any target. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/ReferenceEntry"              },              "examples": {                "bodyWithMetadataExample": {                  "summary": "Body with reference metadata",                  "value": {                    "values": {                      "Verified": {                        "value": {                          "valueId": "Y"                        }                      }                    }                  }                },                "bodyWithoutMetadataExample": {                  "summary": "Body without reference metadata",                  "value": {                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated reference (ReferenceEntry). Returned when a local reference to the target existed in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "201": {            "description": "The created reference (ReferenceEntry). Returned when a local reference to the target did not exist in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a/the reference exists and value for the query parameter \"allow-overwrite\" is \"false\", if the reference cannot be successfully created / updated based on information provided in the request body, if invalid context or workspace information is supplied, if operation is invoked in a terminated workspace or if \"target\" or \"targetType\" is supplied and the values do not match the target ID and reference type specified in the URL.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type or target cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Entities"        ],        "summary": "Deletes the reference",        "description": "Deletes the specified reference. Notice that it is only possible to delete references that are defined locally (\"contextLocal\": true). The entity that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Reference successfully deleted"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the reference cannot be deleted due to a constraint, if an attempt is made to delete a reference that is not defined locally or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/references/{referenceTypeId}/{targetId}/values/{attributeId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns the value for a reference metadata attribute",        "description": "Returns the value for the specified attribute for the specified local reference. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The entity that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / kay value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Entities"        ],        "summary": "Replaces the value for a reference metadata attribute",        "description": "Operation for replacing the value of an attribute on a local reference. It is only possible to replace values on references that are defined locally (\"contextLocal\": true). Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The entity that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued attribute",                  "value": {                    "value": {                      "value": "230"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute",                  "value": {                    "values": [                      {                        "value": "001045575466"                      },                      {                        "value": "001045574551"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied, if an attempt is made to delete a reference that is not defined locally or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Entities"        ],        "summary": "Deletes the value for a reference metadata attribute",        "description": "Operation for deleting the value of an attribute on a reference. Notice that it is only possible to delete non-calculated values on references that are defined locally (\"contextLocal\": true). The entity that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity owning the reference for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied, if an attempt is made to delete a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/values/{attributeId}": {      "get": {        "tags": [          "Entities"        ],        "summary": "Returns the value for an entity attribute",        "description": "Returns the value for the specified attribute. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to retrieve the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Entities"        ],        "summary": "Replaces the value for an entity attribute",        "description": "Operation for replacing an entity attribute value. Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to replace the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueLOVExample": {                  "summary": "A value for a single-valued LOV based attribute",                  "value": {                    "value": {                      "valueId": "AA+"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute",                  "value": {                    "values": [                      {                        "value": "90210"                      },                      {                        "value": "77373"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Entities"        ],        "summary": "Deletes the value for an entity attribute",        "description": "Operation for deleting an entity attribute value. Notice that it is only possible to delete non-calculated, locally defined values. The entity can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the entity for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the entity. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified entity or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/entities/{id}/approve-delete": {      "post": {        "tags": [          "Entities"        ],        "summary":"Approve deletes the entity with the specified ID",        "description":"Operation for approve deleting an entity. A 400 response is also returned if the entity could not be approve deleted.",        "parameters": [          {            "name":"id",            "description":"ID of the entity to approve delete",            "in":"path",            "required":true,            "schema": {              "type":"string"            }          },          {            "$ref":"#/components/parameters/context"          },          {            "$ref":"#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description":"Entity successfully approve deleted."          },          "400": {            "description":"Returned if entity could not be approve deleted",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404": {            "description":"If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },	"/entities/{id}/purge": {      "post": {        "tags": [          "Entities"        ],        "summary":"Purges the entity with the specified ID from recycle bin",        "description":"Operation for purging a specific entity. Operation can only be invoked if the entity is already approve deleted.",        "parameters": [          {            "name":"id",            "description":"ID of the entity to purge",            "in":"path",            "required":true,            "schema": {              "type":"string"            }          },          {            "$ref":"#/components/parameters/context"          },          {            "$ref":"#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description":"Entity successfully purged from recycle bin."          },          "400": {            "description":"Error caused by client. Returned if, for instance, the entity is not approve deleted.",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404": {            "description":"If the specified entity cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns basic event processor representations",        "description": "Operation for retrieving an array of basic event processor representations for all accessible processors",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of basic event processor representations",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/EventProcessor"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/disable": {      "post": {        "tags": [          "Event Processors"        ],        "summary": "Disables the specified event processor",        "description": "Operation for disabling an event processor. Can be called regardless of the event processor status.",        "parameters": [          {            "name": "id",            "description": "ID of the event processor to disable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/enable": {      "post": {        "tags": [          "Event Processors"        ],        "summary": "Enables the specified event processor",        "description": "Operation for enabling an event processor. Can be called regardless of the event processor status. Event processors with status 'failed' will be resumed.",        "parameters": [          {            "name": "id",            "description": "ID of the event processor to enable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/execution-report": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns the execution report for the specified event processor",        "description": "Operation for retrieving the execution report for the main process of a specific event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to retrieve the execution report",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Execution report for the event processor with the specified ID as a stream of ExecutionReportEntries",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/ExecutionReportEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/invoke": {      "post": {        "tags": [          "Event Processors"        ],        "summary": "Invokes the specified event processor",        "description": "Operation for invoking an event processor. Can be called only for event processors with status 'enabled'.",        "parameters": [          {            "name": "id",            "description": "ID of the event processor to invoke",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if operation is invoked for an event processor that does not have the status 'enabled'.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/queue/disable": {      "post": {        "tags": [          "Event Processors"        ],        "summary": "Disables the event queue associated with the event processor",        "description": "Operation for disabling the event queue associated with an event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to disable the event queue",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/queue/enable": {      "post": {        "tags": [          "Event Processors"        ],        "summary": "Enables the event queue associated with the event processor",        "description": "Operation for enabling the event queue associated with an event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to enable the event queue",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/queue/number-of-unread-events": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns the number of unread events for the associated event queue",        "description": "Operation for retrieving the number of unread events for event queue associated with a specific event processor. The count will be cached for up to 15 seconds server-side.",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to retrieve the number of unread events",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The number of unread events",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Amount"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/queue/status": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns the status of the event queue associated with the event processor",        "description": "Operation for retrieving status information for the event queue associated with an event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to retrieve the event queue status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Status for the event queue",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EventQueueStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/statistics": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns statistics for the specified event processor",        "description": "Operation for retrieving statistics for a specific event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to retrieve the statistics",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Statistics for the event processor",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EventProcessorStatistics"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/event-processors/{id}/status": {      "get": {        "tags": [          "Event Processors"        ],        "summary": "Returns the status of the specified event processor",        "description": "Operation for retrieving status information for a specific event processor",        "parameters": [          {            "name": "id",            "description": "ID of the event processor for which to retrieve the status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Status for the event processor",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EventProcessorStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified event processor cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/export/{exportConfigurationId}": {      "post": {        "tags": [          "Export"        ],        "summary": "Starts an export background process",        "description": "Operation for starting an export background process. Data will by default be exported from the request context/workspace. Use the 'useRequestContextWorkspace' query parameter with the value 'false' to change this behavior to instead use the context and workspace from the export configuration. If no export root nodes are supplied via the request body, root nodes from the export configuration will be used.",        "parameters": [          {            "name": "exportConfigurationId",            "description": "ID of the export configuration to use",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "useRequestContextWorkspace",            "description": "Should data be exported from the request context/workspace. If 'false', context/workspace information from the export configurtaion will be used. Defaults to 'true'.",            "in": "query",            "schema": {              "type": "boolean",              "default": true            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody" : {          "content" : {            "application/json" : {              "schema" : {                "$ref": "#/components/schemas/ExportSpecification"              }            }          }        },        "responses": {          "200": {            "description": "Export background process successfully started. Response content is the background process ID.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/BackgroundProcessIdentification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/import/{importConfigurationId}": {      "post": {        "tags": [          "Import"        ],        "summary": "Starts an import background process",        "description": "Operation for starting an import background process. For STEPXML imports, the process will be run in the context/workspace specified in the STEPXML file. For other imports, the request context/workspace will be used.",        "parameters": [          {            "name": "importConfigurationId",            "description": "ID of the import configuration to use",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "processDescription",            "description": "Optional process description",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody" : {          "content" : {            "application/octet-stream" : {              "schema" : {                "type" : "string",                "format" : "binary"              }            }          }        },        "responses": {          "200": {            "description": "Import background process successfully started. Response content is the background process ID.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/BackgroundProcessIdentification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/gateway-integration-endpoints":{        "get":{          "tags":[            "Gateway Integration Endpoints"          ],          "summary":"Returns basic gateway integration endpoint representations",          "description":"Operation for retrieving an array of basic gateway integration endpoint representations for all accessible gateway endpoints.",          "parameters":[            {              "$ref":"#/components/parameters/context"            },            {              "$ref":"#/components/parameters/workspace"            }          ],          "responses":{            "200":{              "description":"An array of basic gateway integration endpoint representations.",              "content":{                "application/json":{                  "schema":{                    "type":"array",                    "items":{                      "$ref":"#/components/schemas/GatewayIntegrationEndpoint"                    }                  }                }              }            },            "400":{              "description":"Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            }          }        }      },      "/gateway-integration-endpoints/{id}/enable":{        "post":{          "tags":[            "Gateway Integration Endpoints"          ],          "summary":"Enables the gateway integration endpoint",          "description":"Operation for enabling a gateway integration endpoint. A 400 response is returned if the endpoint cannot be enabled.",          "parameters":[            {              "name":"id",              "description":"ID of the gateway integration endpoint that should be enabled.",              "in":"path",              "required":true,              "schema":{                "type":"string"              }            },            {              "$ref":"#/components/parameters/context"            },            {              "$ref":"#/components/parameters/workspace"            }          ],          "responses":{            "200":{              "description":"Operation is successful"            },            "400":{              "description":"Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            },            "404":{              "description":"If the specified gateway integration endpoint cannot be found.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            }          }        }      },	"/gateway-integration-endpoints/{id}/disable":{        "post":{          "tags":[            "Gateway Integration Endpoints"          ],          "summary":"Disables the gateway integration endpoint",          "description":"Operation for disabling a gateway integration endpoint. A 400 response is returned if the endpoint cannot be disabled.",          "parameters":[            {              "name":"id",              "description":"ID of the gateway integration endpoint that should be disable.",              "in":"path",              "required":true,              "schema":{                "type":"string"              }            },            {              "$ref":"#/components/parameters/context"            },            {              "$ref":"#/components/parameters/workspace"            }          ],          "responses":{            "200":{              "description":"Operation is successful"            },            "400":{              "description":"Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            },            "404":{              "description":"If the specified gateway integration endpoint cannot be found.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            }          }        }      },    "/gateway-integration-endpoints/{id}/status":{        "get":{          "tags":[            "Gateway Integration Endpoints"          ],          "summary":"Returns the status of the specified gateway integration endpoint",          "description":"Operation for retrieving status information for a specific gateway integration endpoint.",          "parameters":[            {              "name":"id",              "description":"ID of the gateway integration endpoint for which to retrieve the status.",              "in":"path",              "required":true,              "schema":{                "type":"string"              }            },            {              "$ref":"#/components/parameters/context"            },            {              "$ref":"#/components/parameters/workspace"            }          ],          "responses":{            "200":{              "description":"Status for the gateway integration endpoint.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/EndpointStatus"                  }                }              }            },            "400":{              "description":"Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            },            "404":{              "description":"If the specified gateway integration endpoint cannot be found.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            }          }        }      },    "/inbound-integration-endpoints": {      "get": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Returns basic inbound integration endpoint representations",        "description": "Operation for retrieving an array of basic inbound integration endpoint representations for all accessible endpoints",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of basic inbound integration endpoint representations",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/InboundIntegrationEndpoint"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/disable": {      "post": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Disables the specified inbound integration endpoint",        "description": "Operation for disabling an inbound integration endpoint. Can be called regardless of the endpoint status.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint to disable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/enable": {      "post": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Enables the specified inbound integration endpoint",        "description": "Operation for enabling an inbound integration endpoint. Can be called regardless of the endpoint status. Endpoints with status 'failed' will be resumed.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint to enable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/execution-report": {      "get": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Returns the execution report for the specified inbound integration endpoint",        "description": "Operation for retrieving the execution report for the main process of a specific inbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint for which to retrieve the execution report",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Execution report for the inbound integration endpoint with the specified ID as a stream of ExecutionReportEntries",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/ExecutionReportEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/invoke": {      "post": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Invokes the specified inbound integration endpoint",        "description": "Operation for invoking an inbound integration endpoint. Can be called only for endpoints with status 'enabled'.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint to invoke",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if operation is invoked for an endpoint that does not have the status 'enabled'.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/statistics": {      "get": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Returns statistics for the specified inbound integration endpoint",        "description": "Operation for retrieving statistics for a specific inbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint for which to retrieve the statistics",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Statistics for the inbound integration endpoint",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EndpointStatistics"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/status": {      "get": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Returns the status of the specified inbound integration endpoint",        "description": "Operation for retrieving status information for a specific inbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint for which to retrieve the status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Status for the inbound integration endpoint",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EndpointStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/upload-and-invoke": {      "post": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Posts message/file to endpoint with REST receiver",        "description": "Operation for posting a message/file to an inbound integration endpoint with a configured REST receiver and invoking the endpoint. A 400 response is returned if the endpoint does not have a REST-enabled receiver plugin or if the endpoint is not enabled.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "fileName",            "description": "Optional file name (including extension) for the supplied binary data",            "in": "query",            "schema": {              "type": "string",              "default": "unknown"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody" : {          "content" : {            "application/octet-stream" : {              "schema" : {                "type" : "string",                "format" : "binary"              }            }          }        },        "responses": {          "200": {            "description": "Message/file successfully uploaded and endpoint invoked"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied, if operation is invoked for an endpoint that does not have a REST-enabled receiver or if the endpoint is not enabled.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/upload-direct": {      "post": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Posts message/file to endpoint with REST Direct receiver",        "description": "Operation for posting a message/file to an inbound integration endpoint with a configured REST direct receiver and starting a BGP directly if possible. A 400 response is returned if the endpoint does not have a REST-direct-enabled receiver plugin or if the endpoint is not enabled.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "fileName",            "description": "File name (including extension) for the supplied binary data",            "in": "query",            "required": true,            "schema": {              "type": "string",              "default": "unknown"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody" : {          "content" : {            "application/octet-stream" : {              "schema" : {                "type" : "string",                "format" : "binary"              }            }          }        },        "responses": {          "200": {            "description": "Message/file successfully uploaded and BGP created. The ID of the BGP is returned.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/BackgroundProcessIdentification"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied, if operation is invoked for an endpoint that does not have a REST-enabled receiver or if the endpoint is not enabled.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/inbound-integration-endpoints/{id}/worker-processes": {      "get": {        "tags": [          "Inbound Integration Endpoints"        ],        "summary": "Returns background process IDs for processes started by the endpoint",        "description": "Operation for retrieving background process IDs for processes started by the endpoint. Can be filtered on process status.",        "parameters": [          {            "name": "id",            "description": "ID of the inbound integration endpoint for which to retrieve processes",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "name": "status",            "description": "Background process status filter",            "in": "query",            "required": false,            "schema": {              "type": "string",              "enum": ["waiting", "running", "succeeded", "completedwitherrors", "failed", "suspended", "aborted"]            }          }        ],        "responses": {          "200": {            "description": "Array of background process IDs as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context, workspace or status information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified inbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/list-of-values/{id}": {      "get": {        "tags": [          "Lists Of Values"        ],        "summary": "Returns the list of values with the specified ID",        "description": "Operation for retrieving information about a specific list of values object. Notice that the response does not contain the list of values value entries. Use GET /lists-of-values/{id}/value-entries to retrieve these as a streamed array.",        "parameters": [          {            "name": "id",            "description": "ID of the list of values for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The list of values with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ListOfValues"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified list of values cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/list-of-values/{id}/value-entries": {      "get": {        "tags": [          "Lists Of Values"        ],        "summary": "Returns a streamed array of value entries (ListOfValuesEntry)",        "description": "Returns a streamed array of value entries (ListOfValuesEntry) for the list of values with the specified ID.",        "parameters": [          {            "name": "id",            "description": "ID of the list of values for which to retrieve value entries",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Stream of value entries (ListOfValuesEntry) for the list of values with the specified ID",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/ListOfValuesEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified list of values cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/object-types/{id}": {      "get": {        "tags": [          "Object Types"        ],        "summary": "Returns the object type with the specified ID",        "description": "Operation for retrieving information about a specific object type",        "parameters": [          {            "name": "id",            "description": "ID of the object type for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The object type with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ObjectType"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified object type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns basic outbound integration endpoint representations",        "description": "Operation for retrieving an array of basic outbound integration endpoint representations for all accessible endpoints",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of basic outbound integration endpoint representations",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/OutboundIntegrationEndpoint"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/disable": {      "post": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Disables the specified outbound integration endpoint",        "description": "Operation for disabling an outbound integration endpoint. Can be called regardless of the endpoint status.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint to disable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/enable": {      "post": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Enables the specified outbound integration endpoint",        "description": "Operation for enabling an outbound integration endpoint. Can be called regardless of the endpoint status. Endpoints with status 'failed' will be resumed.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint to enable",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/execution-report": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns the execution report for the specified outbound integration endpoint",        "description": "Operation for retrieving the execution report for the main process of a specific outbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve the execution report",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Execution report for the outbound integration endpoint with the specified ID as a stream of ExecutionReportEntries",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/ExecutionReportEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/invoke": {      "post": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Invokes the specified outbound integration endpoint",        "description": "Operation for invoking an outbound integration endpoint. Can be called only for endpoints with status 'enabled'.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint to invoke",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if operation is invoked for an endpoint that does not have the status 'enabled'.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/queue/disable": {      "post": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Disables the event queue associated with the outbound integration endpoint",        "description": "Operation for disabling an event queue associated with an outbound integration endpoint. A 400 response is returned if the endpoint does not have an associated event queue.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to disable the event queue",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if the endpoint does not have an associated event queue.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/queue/enable": {      "post": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Enables the event queue associated with the outbound integration endpoint",        "description": "Operation for enabling an event queue associated with an outbound integration endpoint. A 400 response is returned if the endpoint does not have an associated event queue.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to enable the event queue",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if the endpoint does not have an associated event queue.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/queue/number-of-unread-events": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns the number of unread events for the associated event queue",        "description": "Operation for retrieving the number of unread events for event queue associated with a specific outbound integration endpoint. The count will be cached for up to 15 seconds server-side. A 400 response is returned if the endpoint does not have an associated event queue.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve the number of unread events",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The number of unread events",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Amount"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if the endpoint does not have an associated event queue.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/queue/status": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns the status of the event queue associated with the outbound integration endpoint",        "description": "Operation for retrieving status information for an event queue associated with an outbound integration endpoint. A 400 response is returned if the endpoint does not have an associated event queue.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve the event queue status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Status for the event queue",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EventQueueStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied or if the endpoint does not have an associated event queue.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/statistics": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns statistics for the specified outbound integration endpoint",        "description": "Operation for retrieving statistics for a specific outbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve the statistics",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Statistics for the outbound integration endpoint",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EndpointStatistics"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/status": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns the status of the specified outbound integration endpoint",        "description": "Operation for retrieving status information for a specific outbound integration endpoint",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve the status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Status for the outbound integration endpoint",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/EndpointStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/outbound-integration-endpoints/{id}/worker-processes": {      "get": {        "tags": [          "Outbound Integration Endpoints"        ],        "summary": "Returns background process IDs for processes started by the endpoint",        "description": "Operation for retrieving background process IDs for processes started by the endpoint. Can be filtered on process status.",        "parameters": [          {            "name": "id",            "description": "ID of the outbound integration endpoint for which to retrieve processes",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "name": "status",            "description": "Background process status filter",            "in": "query",            "required": false,            "schema": {              "type": "string",              "enum": ["waiting", "running", "succeeded", "completedwitherrors", "failed", "suspended", "aborted"]            }          }        ],        "responses": {          "200": {            "description": "Array of background process IDs as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context, workspace or status information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified outbound integration endpoint cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products": {      "post": {        "tags": [          "Products"        ],        "summary": "Creates a new product object with autogenerated ID",        "description": "Operation for creating a new product object with autogenerated ID. Object type and a parent product must be specified in the request body. Further, an auto ID pattern must be configured for the object type. An \"id\" must not be supplied in the request body.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Product"              },              "example": {                "name": "AC-AXPFX769",                "objectType": "SalesItem",                "parent": "I-Level3-122",                "values": {                  "CountryOfOrigin": {                    "value": {                      "valueId": "GB"                    }                  },                  "UPC": {                    "value": {                      "value": "445555555575"                    }                  }                },                "references": {                  "Accessory": {                    "references": [                      {                        "target": "I-SalesItem-1111",                        "values": {                          "AccessoryDisplaySequence": {                            "value": {                              "value": "1"                            }                          }                        }                      }                    ]                  }                }              }            }          }        },        "responses": {          "201": {            "description": "Product created successfully",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Product"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, an auto ID pattern is not configured for the specified object type, if the specified object type is not valid below the specified parent, if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/search": {      "post": {        "tags": [          "Products"        ],        "summary": "Search for / query products",        "description": "Operation for querying products. Resource operation will return a maximum of 1000 results. Notice that while the query can be made arbitrarily complex with multiple levels of nested AND and OR conditions, such complex queries will not perform well.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Query"              },              "example": {                "condition": {                  "conditionType": "and",                  "conditions": [                    {                      "conditionType": "simplebelow",                      "topNodeId": "I-Level2-13",                      "topNodeType": "product"                    },                    {                      "conditionType": "objecttype",                      "objectType": "SalesItem"                    }                  ]                }              }            }          }        },        "responses": {          "200": {            "description": "Array of query results as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/QueryResult"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns the product with the specified ID / key value",        "description": "Operation for retrieving information about a specific product object. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The product with the specified ID / key value",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Product"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Products"        ],        "summary": "Deletes the product with the specified ID / key value",        "description": "Operation for deleting a specific product. Operation can only be invoked in editable workspaces and will if successful move the product to the recycle bin. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Product successfully deleted (moved to recycle bin)"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the product cannot be deleted due to constraints like e.g. the product having children or the existence of references pointing to the product, if invalid context or workspace information is supplied or if the operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "Products"        ],        "summary": "Partially updates a product",        "description": "Operation for updating multiple properties with a single request. The product to update can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. Contrary to the PUT /products/{id} replace operation, this operation will only modify data present in the supplied request body.<br/>For both single and multivalued attributes, if a value representation is present in the request body, the existing value will be overwritten. Notice however that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause a value update to be ignored.<br/>For single valued reference types (incl. classification product link types owned by the product side), existing references will be replaced with those provided in the request body. For multivalued reference types, if references in the request body match existing references, these will be replaced. Otherwise references in the request body will be added (i.e. existing references not in the request body will not be removed). As with values, if the property \"contextLocal\" is supplied with the value \"false\" for a reference, the update will be ignored.<br/>If \"parent\" information is supplied, the product will be moved below the specified parent given that it differs from the current.<br/>Data containers can only be updated if auto IDs are configured for the data container type. For single valued data container types, existing data container objects will be replaced with the data container object in the request body. For multi valued data container types, data container objects in the request body will be added if the data container type does not have a key definition. If a data container key definition is present data container objects in the request body will replace existing data containers that matches the data container key, otherwise new data container objects will be added to the multi valued data container.<br/>For attribute links, supplied attribute links will either be added or will replace existing links.<br/>This resource operation does not allow for the product object type to be updated. If an ID is supplied in the request body, it must match the ID of the product identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product to update. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Product"              },              "example": {                "name": "Fender AM Ori­ginal 60 Strat RW OW",                "values": {                  "Body": {                    "value": {                      "value": "Alder"                    }                  },                  "Neck": {                    "value": {                      "value": "Maple"                    }                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Product object successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Product"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Products"        ],        "summary": "Creates or replaces product with known ID",        "description": "Operation for replacing an existing product or creating a new product with known ID. To avoid accidental replacement of existing products, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and a product with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body. Object type and parent must always be specified in the request body. For the replace case, the product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its value for the specified key. A STEP ID is required for creating a new product via this resource operation and a 400 response will therefore be returned if a \"keyId\" is supplied and the object does not exist in advance. If an ID is supplied in the request body, it must match the ID of the product identified via the URL.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the product may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product to replace. If supplied, a key value should be supplied for the \"id\" path parameter. Cannot be used in combination with \"allow-overwrite=true\".",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Product"              },              "example": {                "name": "Fender AM Ori­ginal 60 Strat RW OW",                "objectType": "SalesItem",                "parent": "ElectricGuitars",                "values": {                  "Body": {                    "value": {                      "value": "Alder"                    }                  },                  "Neck": {                    "value": {                      "value": "Maple"                    }                  }                }              }            }          }        },        "responses": {          "200": {            "description": "Product object successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Product"                }              }            }          },          "201": {            "description": "Product object successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Product"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a product with the specified ID already exists and the value for the query parameter \"allow-overwrite\" is \"false\", if a \"keyId\" is supplied and \"allow-overwrite\" is \"true\", if insufficient or erroneous information is provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/approval-status": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns the approval status of the product with the specified ID / key value",        "description": "Operation for retrieving the approval status of a product. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to get the approval status",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Product approval status",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalStatus"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/approve": {      "post": {        "tags": [          "Products"        ],        "summary": "Approves the product with the specified ID / key value",        "description": "Operation for approving a product. The operation can only be invoked in the Main workspace and a 400 response will be returned if the operation is invoked in another workspace. A 400 response is also returned if the product could not be approved, for instance due to a constraint (e.g. parent not present in Approved) or due to the approval being rejected by a business condition. The product to approve can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product to approve",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Product successfully approved. Notice that the product may only have been partially approved. In this case the response will hold information about the part objects that could not be synchronized to the Approved workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ApprovalResponse"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the operation is invoked in a workspace different from Main, if the approval could not be performed or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/children": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns a streamed unsorted array of IDs for product children",        "description": "Returns a streamed unsorted array of IDs for products directly below the specified product. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to retrieve children information",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "A streamed unsorted array of IDs for products directly below the specified product",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/data-containers/{dataContainerTypeId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns data container(s) of the specified type",        "description": "Returns data container(s) of the specified type. Response will either be a SingleDataContainer or a MultiDataContainer depending on whether the data container type is multivalued. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product to retrieve data container(s) for",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "dataContainerTypeId",            "description": "ID of the data container type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "Either a MultiDataContainer or SingleDataContainer depending on whether the specified data container type is multivalued",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/DataContainer"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or data container type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/incoming-references/{referenceTypeId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns stream of incoming references of the specified type",        "description": "Returns an array of incoming references (IncomingReferenceEntry) of the specified type as a stream. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the product side. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve incoming references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of incoming references of the specified type as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/IncomingReferenceEntry"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/references/{referenceTypeId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns reference(s) of the specified type",        "description": "Returns local reference(s) of the specified type owned by the product. Response will either be a SingleReference or a MultiReference depending on whether the reference type is multivalued. Notice that this resource covers both \"cross references\" and  \"classification product links\" owned by the product side. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type for which to retrieve references",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "Either a MultiReference or SingleReference depending on whether the specified reference type is multivalued",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Reference"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/references/{referenceTypeId}/{targetId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns a specific reference",        "description": "Returns the local reference (ReferenceEntry) of specified type from specified product to specified target. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the product side. The product that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "A reference (ReferenceEntry) of specified type from specified product to specified target",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Products"        ],        "summary": "Replaces a reference",        "description": "Replaces the specified reference. If a locally defined reference to the same target already exists or if the reference type is single-valued and a locally defined reference from the source already exists, the \"allow-overwrite\" query parameter must be set to \"true\" in order for the existing reference to be replaced. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the product side. The product that owns / will own the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key. Notice that if \"target\" or \"targetType\" is supplied in the request body, the values must match the reference type and the STEP ID of the target specified in the URL. If the property \"contextLocal\" is supplied with the value \"false\", the update will be ignored.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product that should own the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the desired reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns / will own the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether existing references may be overwritten. This includes references of the same type to the same target and for single-valued reference types, references of the same type to any target. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/ReferenceEntry"              },              "examples": {                "bodyWithMetadataExample": {                  "summary": "Body with reference metadata",                  "value": {                    "values": {                      "Quantity": {                        "value": "7"                      }                    }                  }                },                "bodyWithoutMetadataExample": {                  "summary": "Body without reference metadata",                  "value": {                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated reference (ReferenceEntry). Returned when a local reference to the target existed in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "201": {            "description": "The created reference (ReferenceEntry). Returned when a local reference to the target did not exist in advance.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceEntry"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, a/the reference exists and value for the query parameter \"allow-overwrite\" is \"false\", If the reference cannot be successfully created / updated based on information provided in the request body, if invalid context or workspace information is supplied, if operation is invoked in a terminated workspace or if \"target\" or \"targetType\" is supplied and the values do not match the target ID and reference type specified in the URL",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type or target cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Products"        ],        "summary": "Deletes the reference",        "description": "Deletes the specified reference. Notice that it is only possible to delete references that are defined locally (\"contextLocal\": true). Further notice that this resource covers both \"cross references\" and \"classification product links\" owned by the product side. The product that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Reference successfully deleted"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the reference cannot be deleted due to a constraint, if an attempt is made to delete a reference that is not defined locally or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type, target or reference cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/references/{referenceTypeId}/{targetId}/values/{attributeId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns the value for a reference metadata attribute",        "description": "Returns the value for the specified attribute for the specified local reference. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. Notice that this resource covers both \"cross references\" and \"classification product links\" owned by the product side. The product that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Products"        ],        "summary": "Replaces the value for a reference metadata attribute",        "description": "Operation for replacing the value of an attribute on a local reference. It is only possible to replace values on references that are defined locally (\"contextLocal\": true). Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. Further notice that this resource covers values on both \"cross references\" and \"classification product links\" owned by the product side. The product that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product that owns the reference",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued attribute with unit",                  "value": {                    "value": {                      "value": "230",                      "unit": "kg"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued LOV based attribute",                  "value": {                    "values": [                      {                        "valueId": "WEB"                      },                      {                        "valueId": "PRINT"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied, if an attempt is made to update a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Products"        ],        "summary": "Deletes the value for a reference metadata attribute",        "description": "Operation for deleting the value of an attribute on a reference. Notice that it is only possible to delete non-calculated values on references that are defined locally (\"contextLocal\": true). Further notice that this resource covers values on both \"cross references\" and \"classification product links\" owned by the product side. The product that owns the reference can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key. Likewise, the reference target can be identified either by its STEP ID or if a value for the \"targetKeyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product owning the reference for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "referenceTypeId",            "description": "ID of the reference type",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "targetId",            "description": "ID / key value of the reference target",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product that owns the reference. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "name": "targetKeyId",            "description": "ID of the key definition to be used for identifying the reference target. If supplied, a key value should be supplied for the \"targetId\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied, if an attempt is made to delete a value on a reference that is not locally defined or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product, reference type, target, reference or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/values/{attributeId}": {      "get": {        "tags": [          "Products"        ],        "summary": "Returns the value for a product attribute",        "description": "Returns the value for the specified attribute. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to retrieve the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to retrieve the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          },          {            "$ref": "#/components/parameters/includeInheritedData"          }        ],        "responses": {          "200": {            "description": "The value for the attribute with the specified ID. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Products"        ],        "summary": "Replaces the value for a product attribute",        "description": "Operation for replacing a product attribute value. Request body must be either a SingleValue or a MultiValue depending on whether the attribute is multivalued. Notice that supplying the property \"contextLocal\" with the value \"false\" or the SingleValue \"calculated\" property with the value \"true\" will cause the value update to be ignored. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to replace the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to replace the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/Value"              },              "examples": {                "singleValueExample": {                  "summary": "A value for a single-valued attribute with unit",                  "value": {                    "value": {                      "value": "44",                      "unit": "cm"                    }                  }                },                "multiValueExample": {                  "summary": "A value for a multivalued attribute",                  "value": {                    "values": [                      {                        "value": "001045575466"                      },                      {                        "value": "001045574551"                      }                    ]                  }                }              }            }          }        },        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully updated based on information provided in the request body, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "Products"        ],        "summary": "Deletes the value for a product attribute",        "description": "Operation for deleting a product attribute value. Notice that it is only possible to delete non-calculated, locally defined values. The product can be identified either by its STEP ID or if a value for the \"keyId\" query parameter is supplied, by its key value for the specified key.",        "parameters": [          {            "name": "id",            "description": "ID / key value of the product for which to delete the attribute value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "attributeId",            "description": "ID of the attribute for which to delete the value",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "keyId",            "description": "ID of the key definition to be used for identifying the product. If supplied, a key value should be supplied for the \"id\" path parameter.",            "in": "query",            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The updated value. Will either be an instance of SingleValue or MultiValue depending on whether the attribute is multivalued.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Value"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, the value cannot be successfully deleted, if invalid context or workspace information is supplied or if operation is invoked in a terminated workspace.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified product or attribute cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/products/{id}/approve-delete": {        "post": {          "tags": [            "Products"          ],          "summary":"Approve deletes the product with the specified ID",          "description":"Operation for approving a product. A 400 response is returned if the product could not be approved deleted.",          "parameters": [            {              "name":"id",              "description":"ID of the product to approve delete",              "in":"path",              "required":true,              "schema":{                "type":"string"              }            },            {              "$ref":"#/components/parameters/context"            },            {              "$ref":"#/components/parameters/workspace"            }          ],          "responses": {            "200": {              "description":"Product successfully approved deleted."            },            "400": {              "description":"Returned if product could not be approve deleted.",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            },            "404": {              "description":"If the specified product cannot be found",              "content":{                "application/json":{                  "schema":{                    "$ref":"#/components/schemas/Error"                  }                }              }            }          }        }    },	"/products/{id}/purge": {      "post": {        "tags":[          "Products"        ],        "summary":"Purges the product with the specified ID from recycle bin",        "description":"Operation for purging a specific product. Operation can only be invoked if the product is already approve deleted.",        "parameters": [          {            "name":"id",            "description":"ID of the product to delete",            "in":"path",            "required":true,            "schema": {              "type":"string"            }          },          {            "$ref":"#/components/parameters/context"          },          {            "$ref":"#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description":"Product successfully purged from recycle bin."          },          "400": {            "description":"Error caused by client. Returned if, for instance, the product is not approve deleted.",            "content": {              "application/json":{                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404": {            "description":"If the specified product cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/reference-types/{id}": {      "get": {        "tags": [          "Reference Types"        ],        "summary": "Returns the reference type with the specified ID",        "description": "Operation for retrieving information about a specific reference type object. Notice that this resource covers both \"cross reference types\" and \"classification product link types\".",        "parameters": [          {            "name": "id",            "description": "ID of the reference type for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The reference type with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/ReferenceType"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified reference type cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/reports/historic-changes/{reportID}": {      "post":{        "tags":[          "Reporting"        ],        "summary":"Starts historic changes report generation",        "description":"Starts a reporting process that collects revisions modified by the specified user(s) within the specified timespan and feeds them one at a time to the specified business function. The output from the business function is written to a report available as an attachment to the background process identified in the response. If the business function output is null, the revision will not figure in the final report. Do not expect miracles as for processing time. Most of the data to be handled must be fetched detail by detail from the database server. The analysis is quickly restricted by the timing- and user-bounds described below. The rest is up to the analyzing business function.",        "parameters":[          {            "name":"reportID",            "description":"ID of the report",            "in":"path",            "required":true,            "schema":{              "type":"string"            }          },          {            "name":"analyzerID",            "description":"ID of the business function to be used for analyzing revisions modified by the specified users within the specified timeframe. The function must take a Revision as input and output a String.",            "in":"query",            "required":true,            "schema":{              "type":"string"            }          },          {            "name":"beginning",            "description":"The least (first) boundary restricting the timespan to consider. Must be supplied in the ISO8601 format. E.g. \"1794-01-03 11:28:47\".",            "in":"query",            "required":true,            "schema":{              "type":"string"            }          },          {            "name":"end",            "description":"The greatest (last) boundary restricting the timespan to consider. Must be supplied in the ISO8601 format. E.g. \"1794-01-03 11:28:47\".",            "in":"query",            "required":true,            "schema":{              "type":"string"            }          },          {            "name":"userIDs",            "description":"IDs of users whose changes should be considered. If null or empty, all users are eligible for critical scrutiny.",            "in":"query",            "schema":{              "type":"array",              "items":{                "type":"string"              }            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses":{          "200":{            "description":"Operation successful. Response contents is the background process ID of the report process.",            "content":{              "application/json":{                "schema":{                  "$ref":"#/components/schemas/BackgroundProcessIdentification"                }              }            }          },          "400":{            "description":"Error caused by client.",            "content":{              "application/json":{                "schema":{                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/reports/historic-changes/{reportID}/clean-up":{      "post":{        "tags":[          "Reporting"        ],        "summary":"Deletes configuration objects specific to a report.",        "description":"When a report is started, multiple configuration objects are created (event processors and setup groups). This operation can be called for completed reports and will delete said configuration objects. Once this endpoint has been called, it is no longer possible to retrieve the generated report.",        "parameters":[          {            "name":"reportID",            "description":"ID of the report for which to delete the confguration",            "in":"path",            "required":true,            "schema":{              "type":"string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses":{          "200":{            "description":"Everything was cleaned up."          },          "400":{            "description":"Error caused by client.",            "content":{              "application/json":{                "schema":{                  "$ref":"#/components/schemas/Error"                }              }            }          },          "404":{            "description":"No configuration for the report with the specified ID.",            "content":{              "application/json":{                "schema":{                  "$ref":"#/components/schemas/Error"                }              }            }          }        }      }    },    "/units/{id}": {      "get": {        "tags": [          "Units"        ],        "summary": "Returns the unit with the specified ID",        "description": "Operation for retrieving information about a specific unit object",        "parameters": [          {            "name": "id",            "description": "ID of the unit for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The unit with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Unit"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified unit cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/user-groups/{id}": {      "get": {        "tags": [          "User groups"        ],        "summary": "Returns the user group with the specified ID",        "description": "Operation for retrieving information about a specific user group",        "parameters": [          {            "name": "id",            "description": "ID of the user group for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "User group with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/UserGroup"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "User groups"        ],        "summary": "Creates or replaces user group with known ID",        "description": "Operation for replacing an existing user group or creating a new user group with known ID. To avoid accidental replacement of existing user group, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and a user group with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body.",        "parameters": [          {            "name": "id",            "description": "ID of the user group to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the user group may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/UserGroup"              },              "example": {                "name": "User Group 1",                "vendorRoot": "Classification1",                "values": {                  "HelpText": {                    "value": {                      "value": "Some text"                    }                  }                }              }            }          }        },        "responses": {          "200": {            "description": "User group with the specified ID successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/UserGroup"                }              }            }          },          "201": {            "description": "User group with the specified ID successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/UserGroup"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "User groups"        ],        "summary": "Partially updates user group with known ID",        "description": "Operation for updating multiple properties with a single request",        "parameters": [          {            "name": "id",            "description": "ID of the user group to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/UserGroup"              },              "example": {                "name": "User Group 2",                "vendorRoot": "Classification1"              }            }          }        },        "responses": {          "200": {            "description": "User group with the specified ID successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/UserGroup"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete": {        "tags": [          "User groups"        ],        "summary": "Deletes user group with the specified ID",        "description": "Operation for deleting the specific user group",        "parameters": [          {            "name": "id",            "description": "ID of the user group to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "User group successfully deleted"          },          "400": {            "description": "Returned if the user group has subgroups, if it has linked users or if invalid context or workspace information is supplied",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/user-groups/{id}/users": {      "get": {        "tags": [          "User groups"        ],        "summary": "Returns IDs of users being members of this user group",        "description": "Operation for retrieving an array of ID's of users being members of the given user group",        "parameters": [          {            "name": "id",            "description": "ID of the user group for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "recursive",            "description": "Specifies whether response should contain users being members of nested groups. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of users being members of the user group",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/user-groups/{id}/children": {      "get": {        "tags": [          "User groups"        ],        "summary": "Returns subgroups of the user group with known ID",        "description": "Operation for retrieving an array of ID's of subgroups of the given user group. It returns the immediate subgroups",        "parameters": [          {            "name": "id",            "description": "ID of the user group for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "An array of subgroups of the user group",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user group cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/users/{id}": {      "get": {        "tags": [          "Users"        ],        "summary": "Returns the user with the specified ID",        "description": "Operation for retrieving information about a specific user",        "parameters": [          {            "name": "id",            "description": "ID of the user for which to retrieve data",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The user with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/User"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "put": {        "tags": [          "Users"        ],        "summary": "Creates or replaces user with known ID",        "description": "Operation for replacing an existing user or creating a new user with known ID. To avoid accidental replacement of existing user, replacement will only be performed if the value \"true\" is supplied for the \"allow-overwrite\" query parameter. A 400 response is returned if the value for \"allow-overwrite\" is \"false\" and a user with the specified ID already exists. When replacing, any data that is local to the working context (or not dimension dependent) and for which the client has write permissions will be overwritten and replaced with the data provided in the request body.",        "parameters": [          {            "name": "id",            "description": "ID of the user to create or replace",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "allow-overwrite",            "description": "Specifies whether the user may be overwritten / replaced if it already exists. Defaults to \"false\".",            "in": "query",            "schema": {              "type": "boolean",              "default": false            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/User"              },              "example": {                "name": "Scooby Doo",                "email": "scoobydoo@somecompany.com",						    "values": {					        "FirstName": {				            "value": {				              "value": "Scooby"				            }					        },                  "Phone": {                    "value": {                      "value": "123-123-4567"                    }                  }						    },                "userGroups": ["UG1", "UG2", "UG3"]              }            }          }        },        "responses": {          "200": {            "description": "User with the specified ID successfully replaced",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/User"                }              }            }          },          "201": {            "description": "User with the specified ID successfully created",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/User"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "patch": {        "tags": [          "Users"        ],        "summary": "Partially updates user with known ID",        "description": "Operation for updating multiple properties with a single request",        "parameters": [          {            "name": "id",            "description": "ID of the user to update",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/User"              },              "example": {                "email": "scooby.doo@somecompany.com",						    "values": {                  "Phone": {                    "value": {                      "value": "123-123-4567"                    }                  }						    }              }            }          }        },        "responses": {          "200": {            "description": "User with the specified ID successfully updated",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/User"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      },      "delete":{        "tags": [          "Users"        ],        "summary": "Deletes user with the specified ID",        "description": "Operation for deleting the specific user",        "parameters": [          {            "name": "id",            "description": "ID of the user to delete",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "User successfully deleted"          },          "400": {            "description": "Returned when a user is in use, for instance has assigned tasks or is used in an IEP. It is also returned  if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/users/{id}/randomize-step-password": {      "post": {        "tags": [          "Users"        ],        "summary": "Set password for the user to something random",        "description": "Operation for randomizing local password. This will not have any effect on external authenticated users.",        "parameters": [          {            "name": "id",            "description": "ID of the user for which to randomize password",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Password successfully randomized"          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/users/{id}/add-to-group": {      "post": {        "tags": [          "Users"        ],        "summary": "Adds user to specified user group",        "description": "Operation for adding user to specified user group",        "parameters": [          {            "name": "id",            "description": "ID of the user which should be added to specified user group",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/UserGroupChangeRequest"              },              "example": {                "groupId": "UG1"              }            }          }        },        "responses": {          "200": {            "description": "User successfully added to user group"          },          "400": {            "description": "Error caused by client. If specified user group cannot be found, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/users/{id}/remove-from-group": {      "post": {        "tags": [          "Users"        ],        "summary": "Removes user from specified user group",        "description": "Operation for removing user from specified user group",        "parameters": [          {            "name": "id",            "description": "ID of the user which should be removed from specified user group",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/UserGroupChangeRequest"              },              "example": {                "groupId": "UG1"              }            }          }        },        "responses":{          "200": {            "description": "User successfully removed from user group"          },          "400": {            "description": "Returned if the group is the only group the user is in, if specified user group cannot be found, if invalid context or workspace information is supplied",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified user cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflows": {      "get": {        "tags": [          "Workflows"        ],        "summary": "Returns IDs of available workflows",        "description": "Operation for retrieving an array of IDs of the available workflows",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Array of workflow IDs",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflows/{id}": {      "get": {        "tags": [          "Workflows"        ],        "summary": "Returns the workflow with the specified ID",        "description": "Operation for retrieving a basic representation of a workflow",        "parameters": [          {            "name": "id",            "description": "ID of the workflow",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The workflow with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Workflow"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflows/{id}/instances": {      "post": {        "tags": [          "Workflows"        ],        "summary": "Starts a workflow",        "description": "Operation for starting a workflow. I.e. creating a workflow instance.",        "parameters": [          {            "name": "id",            "description": "ID of the workflow",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/WorkflowInstanceCreation"              }            }          }        },        "responses": {          "200": {            "description": "Workflow successfully started",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/WorkflowInstance"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if an instance already exists for the supplied object, if the supplied object is not valid for the workflow, if initiation is prevented by a workflow start condition or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflows/{id}/instances/{instanceId}": {      "delete": {        "tags": [          "Workflows"        ],        "summary": "Deletes the workflow instance with the specified ID",        "description": "Operation for deleting a specific workflow instance",        "parameters": [          {            "name": "id",            "description": "ID of the workflow",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "name": "instanceId",            "description": "ID of the workflow instance",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Workflow instance successfully deleted"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the user is not privileged to delete the instance or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow or workflow instance cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/search": {      "post": {        "tags": [          "Workflow Tasks"        ],        "summary": "Search for / query workflow tasks",        "description": "Operation for querying workflow tasks. Resource operation will return a maximum of 1000 results.",        "parameters": [          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/WorkflowTaskQuery"              }            }          }        },        "responses": {          "200": {            "description": "Array of task IDs as a stream",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "type": "string"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/{id}": {      "get": {        "tags": [          "Workflow Tasks"        ],        "summary": "Returns the workflow task with the specified ID",        "description": "TODO",        "parameters": [          {            "name": "id",            "description": "ID of the workflow task",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "The workflow task with the specified ID",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/WorkflowTask"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow task cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/{id}/claim": {      "post": {        "tags": [          "Workflow Tasks"        ],        "summary": "Claims a specific workflow tasks",        "description": "Operation for claiming a workflow task. I.e. assigning the task to the user invoking the operation.",        "parameters": [          {            "name": "id",            "description": "ID of the workflow task",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if the task could not be claimed or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow task cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/{id}/events": {      "get": {        "tags": [          "Workflow Tasks"        ],        "summary": "Returns the available events for a task",        "description": "Operation for retrieving an array of events available for the specified task",        "parameters": [          {            "name": "id",            "description": "ID of the workflow task",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Array of available events",            "content": {              "application/json": {                "schema": {                  "type": "array",                  "items": {                    "$ref": "#/components/schemas/WorkflowEvent"                  }                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow task cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/{id}/trigger-event": {      "post": {        "tags": [          "Workflow Tasks"        ],        "summary": "Triggers an event for a task",        "description": "Operation for triggering an event for a specific task. That is, completing the workflow task.",        "parameters": [          {            "name": "id",            "description": "ID of the workflow task",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "requestBody": {          "content": {            "application/json": {              "schema": {                "$ref": "#/components/schemas/TriggerWorkflowEvent"              }            }          }        },        "responses": {          "200": {            "description": "Event triggered successfully. Task completed.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/WorkflowInstance"                }              }            }          },          "400": {            "description": "Error caused by client. Returned if, for instance, insufficient or erroneous information is provided in the request body, if the supplied event is not valid for the tasks, if triggering the event did not lead to successful progression of the workflow or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow task cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    },    "/workflow-tasks/{id}/release": {      "post": {        "tags": [          "Workflow Tasks"        ],        "summary": "Releases a task",        "description": "Operation for releasing a workflow task. Can only be called if the task currently is assigned to the user invoking the operation. When a task is released it is assigned back to the previously assigned group or the default assignee for the workflow state.",        "parameters": [          {            "name": "id",            "description": "ID of the workflow task",            "in": "path",            "required": true,            "schema": {              "type": "string"            }          },          {            "$ref": "#/components/parameters/context"          },          {            "$ref": "#/components/parameters/workspace"          }        ],        "responses": {          "200": {            "description": "Operation is successful"          },          "400": {            "description": "Error caused by client. Returned if, for instance, the current user is not the assignee or if invalid context or workspace information is supplied.",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          },          "404": {            "description": "If the specified workflow task cannot be found",            "content": {              "application/json": {                "schema": {                  "$ref": "#/components/schemas/Error"                }              }            }          }        }      }    }  },  "components": {    "parameters": {      "context": {        "name": "context",        "description": "ID of the context in which to perform the operation",        "required": true,        "in": "query",        "schema": {          "type": "string"        }      },      "workspace": {        "name": "workspace",        "description": "ID of the workspace in which to perform the operation. Defaults to \"Main\".",        "in": "query",        "schema": {          "type": "string",          "default": "Main"        }      },      "includeInheritedData": {        "name": "includeInheritedData",        "description": "Endpoint returns inherited data when parameter is supplied with the value true. Defaults to \"false\".",        "in": "query",        "schema": {          "type": "boolean",          "default": "false"        }      }    },    "schemas": {      "Amount": {        "type": "object",        "description": "Simple amount representation",        "properties": {          "amount": {            "type": "integer",            "description": "The amount",            "readOnly": true,            "format": "int64"          }        }      },      "AndCondition": {        "type": "object",        "description": "Compound condition that lets you \"AND\" multiple other conditions",        "required": ["conditionType", "conditions"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"and\" for this type of condition.",            "enum":["and","or","id","name","textvalue","numericvalue","objecttype","simplebelow","lovvalue","hasreferenceto","hasdatacontainerobject"]          },          "conditions": {            "type": "array",            "description": "The conditions to be AND'ed",            "minItems": 2,            "maxItems": 5,            "items": {              "$ref": "#/components/schemas/Condition"            }          }        }      },      "ApprovalResponse": {        "type": "object",        "description": "Returned when a workspace revisable object is successfully approved. Holds zero or more messages for part objects that could not be synchronized to the Approved workspace.",        "properties": {          "messages": {            "type": "array",            "description": "Messages related to part objects that could not be synchronized to the Approved workspace",            "items": {              "type": "string"            }          }        }      },      "ApprovalStatus": {        "type": "object",        "description": "The approval status of a workspace revisable object",        "properties": {          "approvalStatus": {            "type": "string",            "description": "The status",            "enum": ["NotInApproved", "PartlyApproved", "ContextApproved", "CompletelyApproved"],            "readOnly": true          }        }      },      "Asset": {        "type": "object",        "description": "An asset object",        "properties": {          "id": {            "type": "string",            "description": "ID of the asset object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Asset name"          },          "objectType": {            "type": "string",            "description": "Object type ID"          },          "classifications": {            "type": "array",            "description": "IDs of the classifications that the asset is linked into",            "items": {              "type": "string"            }          },          "values": {            "type": "object",            "description": "Asset values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "references": {            "type": "object",            "description": "References / links from the asset. Keys are reference / link type IDs and values either a SingleReference or a MultiReference depending on whether the reference type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Reference"            }          },          "contentMetadata": {            "type": "object",            "description": "Read-only asset content metadata values. Keys are attribute IDs and values simple string values.",            "additionalProperties": {              "type": "string"            },            "readOnly": true          }        }      },      "Attribute": {        "type": "object",        "description": "An attribute object",        "properties": {          "id": {            "type": "string",            "description": "ID of the attribute object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Attribute name"          },          "multivalued": {            "type": "boolean",            "description": "Boolean indicating whether multiple values can be set for the attribute"          },          "calculated": {            "type": "boolean",            "description": "Boolean indicating whether the attribute is calculated"          },          "specification": {            "type": "boolean",            "description": "Boolean indicating whether the attribute is a \"specification\" attribute as opposed to a \"description\" attribute"          },          "dataTypeGroups": {            "type": "array",            "description": "An array of IDs of the data type groups (a.k.a. \"attribute groups\") that the attribute is linked into",            "items": {              "type": "string"            }          },          "listOfValues": {            "type": "string",            "description": "ID of a list of values if the attribute is list of values based. Otherwise \"null\"."          },          "units": {            "type": "array",            "description": "An array of IDs for the valid units",            "items": {              "type": "string"            }          },          "defaultUnit": {            "type": "string",            "description": "ID of the default unit, if any. Otherwise \"null\"."          },          "values": {            "type": "object",            "description": "Attribute metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "AttributeLink": {        "type": "object",        "description": "A link between a product or a classification and a specification attribute",        "properties": {          "attribute": {            "type": "string",            "description": "ID of the attribute that the link points to"          },          "values": {            "type": "object",            "description": "Attribute link metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "BackgroundProcess": {        "type": "object",        "description": "A background process instance",        "properties": {          "id": {            "type": "string",            "description": "ID of the background process instance",            "readOnly": true          },          "backgroundProcessType": {            "type": "string",            "description": "The background process type",            "readOnly": true          },          "description": {            "type": "string",            "description": "Background process description",            "readOnly": true          },          "user": {            "type": "string",            "description": "ID of the user who started the process",            "readOnly": true          },          "status": {            "type": "string",            "description": "Background process status",            "enum": ["waiting", "running", "succeeded", "completedwitherrors", "failed", "suspended", "aborted", "unexpected"],            "readOnly": true          },          "created": {            "type": "string",            "description": "Time that the process was created in yyyy-mm-ddThh:mm:ss&#177hh:mm format",            "readOnly": true          },          "started": {            "type": "string",            "description": "Time that the process was started in yyyy-mm-ddThh:mm:ss&#177hh:mm format. 'null' if the process has not yet started.",            "readOnly": true          },          "ended": {            "type": "string",            "description": "Time that the process ended in yyyy-mm-ddThh:mm:ss&#177hh:mm format. 'null' if the process is still active.",            "readOnly": true          },          "numberOfWarnings": {            "type": "integer",            "description": "Number of warnings during process execution",            "readOnly": true,            "format": "int32"          },          "numberOfErrors": {            "type": "integer",            "description": "Number of errors during process execution",            "readOnly": true,            "format": "int32"          },          "progress": {            "type": "integer",            "description": "Progress in percent",            "readOnly": true,            "format": "int32"          }        }      },      "BackgroundProcessIdentification": {        "type": "object",        "description": "Object wrapping a background process ID",        "properties": {          "id": {            "type": "string",            "description": "ID of the background process",            "readOnly": true          }        }      },      "BackgroundProcessType": {        "type": "object",        "description": "Background process type",        "properties": {          "id": {            "type": "string",            "description": "ID of the background process type",            "readOnly": true          }        }      },      "BackgroundProcessAttachmentMetadata": {        "type": "object",        "description": "Background process attachment metadata",        "properties": {          "id": {            "type": "string",            "description": "ID of the background process attachment",            "readOnly": true          },          "name": {            "type": "string",            "description": "Name of the background process attachment",            "readOnly": true          },          "mimeType": {            "type": "string",            "description": "Mime type of the background process attachment",            "readOnly": true          },          "originalAttachmentId": {            "type": "string",            "description": "Original ID of the background process attachment. Please remember that this ID does not have to be unique - same ID can be used by multiple attachments if the attachment holds multiple files",            "readOnly": true          },          "description": {            "type": "string",            "description": "Description of the background process attachment",            "readOnly": true          }        }      },      "Classification": {        "type": "object",        "description": "A classification object",        "properties": {          "id": {            "type": "string",            "description": "ID of the classification object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Classification name"          },          "objectType": {            "type": "string",            "description": "Object type ID"          },          "parent": {            "type": "string",            "description": "Parent classification ID"          },          "values": {            "type": "object",            "description": "Classification values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "references": {            "type": "object",            "description": "References / links from the classification. Keys are reference / link type IDs and values either a SingleReference or a MultiReference depending on whether the reference type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Reference"            }          },          "attributeLinks": {            "type": "array",            "description": "Attribute links from the classification",            "items": {              "$ref": "#/components/schemas/AttributeLink"            }          }        }      },      "Condition": {        "type": "object",        "description": "An \"abstract\" representation of a condition. Must always either be an AndCondition, an OrCondition, an IdCondition, a NameCondition, a TextValueCondition, a NumericValueCondition, an ObjectTypeCondition, a SimpleBelowCondition, an LovValueCondition, a HasReferenceToCondition or a HasDataContainerObjectCondition.",        "properties":{          "conditionType":{            "type":"string",            "enum":["and","or","id","name","textvalue","numericvalue","objecttype","simplebelow","lovvalue","hasreferenceto","hasdatacontainerobject"]          }        },        "oneOf": [          {            "$ref": "#/components/schemas/AndCondition"          },          {            "$ref": "#/components/schemas/OrCondition"          },          {            "$ref": "#/components/schemas/IdCondition"          },          {            "$ref": "#/components/schemas/NameCondition"          },          {            "$ref": "#/components/schemas/TextValueCondition"          },          {            "$ref": "#/components/schemas/NumericValueCondition"          },          {            "$ref": "#/components/schemas/ObjectTypeCondition"          },          {            "$ref": "#/components/schemas/SimpleBelowCondition"          },          {            "$ref": "#/components/schemas/LovValueCondition"          },          {            "$ref": "#/components/schemas/HasReferenceToCondition"          },          {            "$ref": "#/components/schemas/HasDataContainerObjectCondition"          }        ]      },      "DataContainer": {        "type": "object",        "description": "An \"abstract\" representation of a data container. Will always either be a SingleDataContainer or a MultiDataContainer depending on whether the data container type is multivalued.",        "oneOf": [          {            "$ref": "#/components/schemas/SingleDataContainer"          },          {            "$ref": "#/components/schemas/MultiDataContainer"          }        ]      },      "DataContainerEntry": {        "type": "object",        "description": "An atomic data container a.k.a. a data container object",        "properties": {          "values": {            "type": "object",            "description": "Data container values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "references": {            "type": "object",            "description": "References from the data container. Keys are reference type IDs and values either a SingleReference or a MultiReference depending on whether the reference type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Reference"            }          }        }      },      "DataContainerObjectCondition": {        "type": "object",        "description": "An \"abstract\" representation of a condition that can be used to match data container objects. Must always either be an AndCondition, an OrCondition, a TextValueCondition, a NumericValueCondition, or an LovValueCondition. Notice that conditions nested in compound conditions must also be valid data container object conditions.",        "oneOf": [          {            "$ref": "#/components/schemas/AndCondition"          },          {            "$ref": "#/components/schemas/OrCondition"          },          {            "$ref": "#/components/schemas/TextValueCondition"          },          {            "$ref": "#/components/schemas/NumericValueCondition"          },          {            "$ref": "#/components/schemas/LovValueCondition"          }        ]      },      "DataContainerType": {        "type": "object",        "description": "A data container type object",        "properties": {          "id": {            "type": "string",            "description": "ID of the data container type object"          },          "name": {            "type": "string",            "description": "Data container type name"          },          "multivalued": {            "type": "boolean",            "description": "Boolean indication of whether the data container type allows for multiple data container entries / objects"          },          "values": {            "type": "object",            "description": "Data container type metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "DataTypeGroup": {        "type": "object",        "description": "A data type group (a.k.a. \"attribute group\") object",        "properties": {          "id": {            "type": "string",            "description": "ID of the data type group object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Data type group name"          },          "parent": {            "type": "string",            "description": "ID of parent data type group"          },          "values": {            "type": "object",            "description": "Data type group metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "EndpointStatistics": {        "type": "object",        "description": "Statistics for inbound/outbound integration endpoint",        "properties": {          "enabledOn": {            "type": "string",            "description": "Time that the endpoint was enabled in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null for disabled endpoints.",            "readOnly": true          },          "lastRun": {            "type": "string",            "description": "Time for last run (invocation) in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null if the endpoint has never run.",            "readOnly": true          },          "nextRun": {            "type": "string",            "description": "Time for next run (invocation) in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null if no next run is scheduled.",            "readOnly": true          },          "numberOfCreatedWorkerProcesses": {            "type": "integer",            "description": "The number of worker processes that have been created for this endpoint",            "readOnly": true,            "format": "int32"          },          "avgWorkerProcessProcessingTimeInSeconds": {            "type": "integer",            "description": "Average worker process processing time in seconds. Will be null if no processes have run or if the information is not available.",            "readOnly": true,            "format": "int32"          },          "maxWorkerProcessProcessingTimeInSeconds": {            "type": "integer",            "description": "Maximum worker process processing time in seconds. Will be null if no processes have run or if the information is not available.",            "readOnly": true,            "format": "int32"          }        }      },      "EndpointStatus": {        "type": "object",        "description": "Status for inbound/outbound integration endpoint",        "properties": {          "status": {            "type": "string",            "description": "Status for endpoint",            "readOnly": true,            "enum": ["enabled", "disabled", "failed"]          }        }      },      "Entity": {        "type": "object",        "description": "An entity object",        "properties": {          "id": {            "type": "string",            "description": "ID of the entity object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Entity name"          },          "objectType": {            "type": "string",            "description": "Object type ID"          },          "parent": {            "type": "string",            "description": "Parent entity ID"          },          "values": {            "type": "object",            "description": "Entity values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "references": {            "type": "object",            "description": "References from the entity. Keys are reference type IDs and values either a SingleReference or a MultiReference depending on whether the reference type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Reference"            }          },          "dataContainers": {            "type": "object",            "description": "Entity data containers. Keys are data container type IDs and values either a SingleDataContainer or a MultiDataContainer depending on whether the data container type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/DataContainer"            }          }        }      },      "Error": {        "type": "object",        "properties": {          "httpStatus": {            "type": "integer",            "description": "The HTTP status code",            "format": "int32"          },          "message": {            "type": "string",            "description": "Extended error information. Notice that error messages may change without warning and that programming logic should not rely upon the content of the message."          },          "httpReason": {            "type": "string",            "description": "The name of the HTTP status code"          }        }      },      "EventProcessor": {        "type": "object",        "description": "Event processor representation",        "properties": {          "id": {            "type": "string",            "description": "ID of the event processor",            "readOnly": true          },          "name": {            "type": "string",            "description": "Name of the event processor",            "readOnly": true          }        }      },      "EventProcessorStatistics": {        "type": "object",        "description": "Statistics for event processor",        "properties": {          "enabledOn": {            "type": "string",            "description": "Time that the event processor was enabled in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null for disabled event processors.",            "readOnly": true          },          "lastRun": {            "type": "string",            "description": "Time for last run (invocation) in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null if the event processor has never run.",            "readOnly": true          },          "nextRun": {            "type": "string",            "description": "Time for next run (invocation) in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Will be null if no next run is scheduled.",            "readOnly": true          }        }      },      "EventProcessorStatus": {        "type": "object",        "description": "Status for event processor",        "properties": {          "status": {            "type": "string",            "description": "Status for event processor",            "readOnly": true,            "enum": ["enabled", "disabled", "failed"]          }        }      },      "EventQueueStatus": {        "type": "object",        "description": "Status of an event queue. I.e. whether it is enabled (listening) or not.",        "properties": {          "enabled": {            "type": "boolean",            "description": "Is the queue enabled (listening) or not",            "readOnly": true          }        }      },      "ExecutionReportEntry": {        "type": "object",        "description": "A single execution report entry/row",        "properties": {          "entryType": {            "type": "string",            "description": "The type of entry. Either 'info', 'warning' or 'error'.",            "enum": ["info", "warning", "error"],            "readOnly": true          },          "entryText": {            "type": "string",            "description": "The entry text/message",            "readOnly": true          }        }      },      "ExportSpecification": {        "type": "object",        "description": "Object holding optional data for starting an export process",        "properties": {          "stepUrls": {            "type": "array",            "description": "STEP URLs for the nodes to be used as the roots for the export. If 'stepUrls' is 'null' or an empty array is supplied, root nodes from the export configuration will be used.",            "items": {              "type": "string"            }          },          "processDescription": {            "type": "string",            "description": "Desired process description. If not supplied, an auto generated description will be used."          }        }      },      "FindSimilarBusinessRuleResult": {        "type": "object",        "description" : "Object holding additional information about business rule that rejects the incoming entity as source for find similar",        "properties": {          "businessConditionID": {            "description": "ID of rejecting business condition",            "type": "string"          },          "businessConditionMessage": {            "description": "Message from rejecting business rule",            "type": "string"          },          "dataIssuesReport": {            "description": "Optional detailed messages about data issues",            "type": "array",            "items": {              "type": "string"            }          }        }      },      "FindSimilarEntitiesRequest": {        "type": "object",        "description": "Object holding the data for a Find Similar operation for entities",        "properties": {          "maxResults": {            "type": "integer",            "default": 10,            "readOnly": true,            "format": "int32",            "description": "Optional specification for maximum number of similar entities to return. Defaults to 10 and can not exceed 1000."          },          "entity": {            "$ref": "#/components/schemas/Entity"          }        }      },      "FindSimilarEntitiesResponse": {        "type": "object",        "description": "Object holding the result of a Find Similar operation",        "properties": {          "findSimilarExecutionReport": {            "$ref": "#/components/schemas/FindSimilarExecutionReport"          },          "findSimilarResponses": {            "type": "array",            "readOnly": true,            "description": "Potential duplicates with rank scores",            "items": {              "$ref": "#/components/schemas/FindSimilarEntitiesResponseRecord"            }          }        }      },      "FindSimilarEntitiesResponseRecord": {        "type": "object",        "description": "Object holding an entity and its rank score with the entity in the request",        "properties": {          "rank": {            "readOnly": true,            "type": "integer",            "format": "int32",            "description": "Rank score against entity in the request as calculated by the Matching Algorithm."          },          "entity": {            "readOnly": true,            "description": "Existing Entity found by Find Similar",            "$ref": "#/components/schemas/Entity"          }        }      },      "FindSimilarExecutionReport": {        "type": "object",        "description": "Object holding additional information about the result of the find similar operation",        "properties": {          "httpStatus": {            "type": "integer",            "description": "The HTTP status code",            "format": "int32"          },          "httpReason": {            "type": "string",            "description": "The name of the HTTP status code"          },          "message": {            "type": "string",            "description": "Extended error information that can be shown to users."          },          "rejectedByBusinessRuleID": {            "type": "string",            "description": "ID of first failing or rejecting business rule"          },          "businessRuleRejections": {            "description": "Detailed information from all rejecting business rules",            "type": "array",            "items": {              "$ref": "#/components/schemas/FindSimilarBusinessRuleResult"            }          }        }      },      "HasDataContainerObjectCondition": {        "type": "object",        "description": "Condition type for matching objects that have data container objects with specific properties",        "required": ["conditionType", "dataContainerType", "condition"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"hasdatacontainerobject\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "dataContainerType": {            "type": "string",            "description": "The data container type ID"          },          "matchInheritedDataContainerObjects": {            "type": "boolean",            "description": "Should the query match hierarchically inherited data container objects",            "default": false          },          "condition": {            "$ref": "#/components/schemas/DataContainerObjectCondition"          }        }      },      "HasReferenceToCondition": {        "type": "object",        "description": "Has reference query condition. Matches objects that have cross references to the specified target object. This condition type cannot be used to match objects by classification product links.",        "required": ["conditionType", "referenceType", "target"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"hasreferenceto\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "referenceType": {            "type": "string",            "description": "The reference type ID"          },          "target": {            "type": "string",            "description": "The target node ID. Super type will be deduced from the reference type."          },          "matchInheritedReferences": {            "type": "boolean",            "description": "Should the query match hierarchically inherited cross references",            "default": false          },          "metadataCondition": {            "$ref": "#/components/schemas/ReferenceMetadataCondition"          }        }      },      "IdCondition": {        "type": "object",        "description": "Node ID query condition",        "required": ["conditionType", "operator", "queryString"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"id\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "operator": {            "type": "string",            "description": "The condition operator",            "enum": [              "like",              "eq",              "neq"            ]          },          "queryString": {            "type": "string",            "description": "The query string. When the \"like\" operator is used, the wildcards \"*\" (any number of characters) and \"?\" (single character) can be used in the query string. Wildcard characters can be escaped using \"\\\". I.e. like(\"\\\\?*\") will match values starting with a question mark. Notice that backslash character (\"\\\") needs to be escaped if searching for that character. Notice that queries starting with a wildcard typically will not perform well."          }        }      },      "InboundIntegrationEndpoint": {        "type": "object",        "description": "Inbound integration endpoint representation",        "properties": {          "id": {            "type": "string",            "description": "ID of the inbound integration endpoint",            "readOnly": true          },          "name": {            "type": "string",            "description": "Name of the inbound integration endpoint",            "readOnly": true          }        }      },      "GatewayIntegrationEndpoint":{		"type":"object",		"description":"Gateway integration endpoint representation",		"properties":{			"id":{			  "type":"string",			  "description":"ID of the gateway integration endpoint",			  "readOnly":true			},			"name":{			  "type":"string",			  "description":"Name of the gateway integration endpoint",			  "readOnly":true			}		}	  },      "IncomingReferenceEntry": {        "type": "object",        "description": "An atomic reference seen from the reference target. Can represent both a \"cross reference\" and a \"classifictaion product link\".",        "properties": {          "source": {            "type": "string",            "description": "ID of the reference source",            "readOnly": true          },          "sourceType": {            "type": "string",            "description": "Source \"supertype\"",            "readOnly": true,            "enum": [              "product",              "classification",              "entity",              "asset"            ]          },          "values": {            "type": "object",            "description": "Reference metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "ListOfValues": {        "type": "object",        "description": "A list of values object. Notice that the representation does not include value entires. These must be obtained via a separate resource.",        "properties": {          "id": {            "type": "string",            "description": "ID of the list of values object",            "readOnly": true          },          "name": {            "type": "string",            "description": "List of values name"          },          "extendable": {            "type": "boolean",            "description": "Boolean indication of whether it is possible to add values to the list of values via data objects"          },          "usesValueIds": {            "type": "boolean",            "description": "Boolean indication of whether the list of values uses value IDs"          },          "values": {            "type": "object",            "description": "List of values metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "ListOfValuesEntry": {        "type": "object",        "description": "A value entry for a list of values",        "properties": {          "value": {            "type": "string",            "description": "The \"value\" part of the value"          },          "valueId": {            "type": "string",            "description": "The value ID (for lists of values that use value IDs)"          },          "unit": {            "type": "string",            "description": "Unit ID"          }        }      },      "LovValueCondition": {        "type": "object",        "description": "LOV value query condition. This type of value condition can be used for LOV validated attributes for which the LOV uses value IDs.",        "required": ["conditionType", "attribute", "valueId"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"lovvalue\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "attribute": {            "type": "string",            "description": "Id of the attribute for which to match the value"          },          "valueId": {            "type": "string",            "description": "The value ID"          },          "matchInheritedValues": {            "type": "boolean",            "description": "Should the query match hierarchically inherited values",            "default": false          }        }      },      "MatchAndMergeGeneralExecutionReport": {        "type": "object",        "description": "Object holding additional information about the result of the match and merge operation",        "properties": {          "httpStatus": {            "type": "integer",            "description": "The HTTP status code",            "format": "int32"          },          "httpReason": {            "type": "string",            "description": "The name of the HTTP status code"          },          "message": {            "type": "string",            "description": "Extended error information that can be shown to users"          }        }      },      "MatchAndMergeExecutionReport": {        "type": "object",        "description": "Execution report for a single Record in a Match and Merge Request",        "properties": {          "operation" : {            "type": "string",            "description": "The operation performed for the Merge Golden Record in the response\"",            "readOnly": true,            "enum": ["NEW", "UPDATE", "FAILED"]          },          "errorMessage": {            "type": "string",            "description": "Error message from the operation",            "readOnly": true          },          "rejectedByBusinessCondition": {            "type": "array",            "description": "Records rejected by business conditions",            "readOnly": true,            "items": {              "$ref": "#/components/schemas/RejectedByBusinessCondition"            }          },          "rejectedByPotentialDuplicates": {            "type": "boolean",            "description": "Indicates that the record was rejected by potential duplicates",            "readOnly": true          }        }      },      "RejectedByBusinessCondition": {        "type": "object",        "description": "Records rejected by business conditions",        "properties": {          "rejectedByBusinessConditionID": {            "type": "string",            "description": "ID of business condition that rejected the Record",            "readOnly": true          },          "rejectedByBusinessConditionReason": {            "type": "string",            "description": "Message from the business condition that rejected the record",            "readOnly": true          }        }      },      "MatchAndMergePotentialDuplicate": {        "type": "object",        "description": "A potential duplicate in a Match and Merge request",        "properties": {          "rank": {            "type": "string",            "description": "Rank score"          },          "entity": {            "$ref": "#/components/schemas/Entity"          }        }      },      "MatchAndMergeResponse": {        "type": "object",        "description": "Object holding the result of a Match And Merge operation.",        "properties": {          "matchAndMergeGeneralExecutionReport": {            "$ref": "#/components/schemas/MatchAndMergeGeneralExecutionReport"          },          "matchAndMergeResponses": {            "type": "array",            "readOnly": true,            "description": "List of individual Record result from a Match and Merge Request, correlated by correlation ID to a MatchAndMergeRecordIn",            "items": {              "$ref": "#/components/schemas/MatchAndMergeRecordOut"            }          }        }      },      "MatchAndMergeRecordIn": {        "type": "object",        "description": "A Match an Merge Entity with correlation ID",        "properties": {          "correlationID": {            "type": "string",            "description": "Correlation ID of the Match and Merge entity object",            "readOnly": true          },          "entity":  {            "$ref": "#/components/schemas/Entity"          }        }      },      "MatchAndMergeRecordOut": {        "type": "object",        "description": "Individual Record result from a Match and Merge Request, correlated by correlation ID to a MatchAndMergeRecordIn",        "properties": {          "correlationID": {            "type": "string",            "description": "Correlation ID as posted in the request",            "readOnly": true          },          "status": {            "type": "string",            "description": "Status of operation",            "readOnly": true          },          "potentialDuplicates": {            "type": "array",            "description": "Potential duplicates for the input record.",            "readOnly": true,            "items": {              "$ref": "#/components/schemas/MatchAndMergePotentialDuplicate"            }          },          "matchAndMergeExecutionReport": {            "$ref": "#/components/schemas/MatchAndMergeExecutionReport",            "readOnly": true          },          "entity": {            "$ref": "#/components/schemas/Entity"          }        }      },      "MultiDataContainer": {        "type": "object",        "description": "Data containers for a multivalued data container type",        "properties": {          "dataContainers": {            "type": "array",            "description": "Contained data entries / objects",            "items": {              "$ref": "#/components/schemas/DataContainerEntry"            }          },          "inherited": {            "type": "boolean",            "description": "Indicates whether the datacontainer is inherited from parent node.",            "readOnly": true          }        },        "additionalProperties": false      },      "MultiReference": {        "type": "object",        "description": "References for a multivalued reference type. Covers both \"cross references\" and \"classification product links\".",        "properties": {          "references": {            "type": "array",            "description": "Multiple references of specific reference type",            "items": {              "$ref": "#/components/schemas/ReferenceEntry"            }          }        },        "additionalProperties": false      },      "MultiValue": {        "type": "object",        "description": "A value for a multivalued attribute",        "properties": {          "contextLocal": {            "type": "boolean",            "description": "Indicates whether the value is set locally or inherited from a dimension point / a combination dimension points different from the ones used for current context. Should not be supplied for value updates. If supplied with the value \"false\", the update of the specific value will be skipped.",            "readOnly": true          },          "inherited": {            "type": "boolean",            "description": "Indicates whether the value is inherited from parent node.",            "readOnly": true          },          "values": {            "type": "array",            "description": "Multiple values entries for multivalued attribute",            "items": {              "$ref": "#/components/schemas/ValueEntry"            }          }        },        "additionalProperties": false      },      "NameCondition": {        "type": "object",        "description": "Node name query condition",        "required": ["conditionType", "operator", "queryString"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"name\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "operator": {            "type": "string",            "description": "The condition operator",            "enum": [              "like",              "eq",              "neq"            ]          },          "queryString": {            "type": "string",            "description": "The query string. When the \"like\" operator is used, the wildcards \"*\" (any number of characters) and \"?\" (single character) can be used in the query string. Wildcard characters can be escaped using \"\\\". I.e. like(\"\\\\?*\") will match values starting with a question mark. Notice that backslash character (\"\\\") needs to be escaped if searching for that character. Notice that queries starting with a wildcard typically will not perform well."          },          "ignoreCase": {            "type": "boolean",            "description": "Should the query be non-case sensitive",            "default": false          }        }      },      "NumericValueCondition": {        "type": "object",        "description": "Numeric value query condition. This type of value condition can only be used for attributes of the validation base types \"Integer\", \"Number\", and \"Fraction\". If no unit information is supplied, the condition will only match values without units. E.g. \"5\" is not equal to \"5 kg\".",        "required": ["conditionType", "attribute", "operator", "queryValue"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"numericvalue\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "attribute": {            "type": "string",            "description": "ID of the attribute for which to match the value. Attribute validation base type must be either \"Integer\", \"Number\", \"Fraction\" or \"Numeric Text\"."          },          "operator": {            "type": "string",            "description": "The condition operator",            "enum": [              "eq",              "neq",              "gt",              "gteq",              "lt",              "lteq"            ]          },          "queryValue": {            "type": "number",            "description": "The query value"          },          "unit": {            "type": "string",            "description": "ID of the unit that \"queryValue\" is supplied in"          },          "matchInheritedValues": {            "type": "boolean",            "description": "Should the query match hierarchically inherited values",            "default": false          }        }      },      "ObjectType": {        "type": "object",        "description": "An object type object",        "properties": {          "id": {            "type": "string",            "description": "ID of the object type object"          },          "name": {            "type": "string",            "description": "Object type name"          },          "values": {            "type": "object",            "description": "Object type metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "ObjectTypeCondition": {        "type": "object",        "description": "Object type query condition",        "required": ["conditionType", "objectType"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"objecttype\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "objectType": {            "type": "string",            "description": "Object type ID"          }        }      },      "OrCondition": {        "type": "object",        "description": "Compound condition that lets you \"OR\" multiple other conditions",        "required": ["conditionType", "conditions"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"or\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "conditions": {            "type": "array",            "description": "The conditions to be OR'ed",            "minItems": 2,            "maxItems": 5,            "items": {              "$ref": "#/components/schemas/Condition"            }          }        }      },      "OutboundIntegrationEndpoint": {        "type": "object",        "description": "Outbound integration endpoint representation",        "properties": {          "id": {            "type": "string",            "description": "ID of the outbound integration endpoint",            "readOnly": true          },          "name": {            "type": "string",            "description": "Name of the outbound integration endpoint",            "readOnly": true          }        }      },      "Product": {        "type": "object",        "description": "A product object",        "properties": {          "id": {            "type": "string",            "description": "ID of the product object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Product name"          },          "objectType": {            "type": "string",            "description": "Object type ID"          },          "parent": {            "type": "string",            "description": "Parent product ID"          },          "values": {            "type": "object",            "description": "Product values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "references": {            "type": "object",            "description": "References / links from the product. Keys are reference / link type IDs and values either a SingleReference or a MultiReference depending on whether the reference type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Reference"            }          },          "attributeLinks": {            "type": "array",            "description": "Attribute links from the product",            "items": {              "$ref": "#/components/schemas/AttributeLink"            }          },          "dataContainers": {            "type": "object",            "description": "Product data containers. Keys are data container type IDs and values either a SingleDataContainer or a MultiDataContainer depending on whether the data container type is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/DataContainer"            }          }        }      },      "Query": {        "type": "object",        "description": "A query specification. Nested condition can be a compound condition. See \"Condition\" for more information.",        "required": ["condition"],        "properties":{          "condition":{            "$ref":"#/components/schemas/Condition"          }        }      },      "QueryResult": {        "type": "object",        "description": "A query result. The \"type\" and \"id\" combined uniquely identifies an object in STEP.",        "properties": {          "type": {            "type": "string",            "description": "The result supertype",            "enum": [              "asset",              "classification",              "entity",              "product"            ]          },          "id": {            "type": "string",            "description": "The result id"          }        }      },      "Reference": {        "type": "object",        "description": "An \"abstract\" representation of references for a specific reference type. Will always either be a SingleReference or a MultiReference depending on whether the reference type is multivalued.",        "oneOf": [          {            "$ref": "#/components/schemas/SingleReference"          },          {            "$ref": "#/components/schemas/MultiReference"          }        ]      },      "ReferenceEntry": {        "type": "object",        "description": "An atomic reference. Can represent both a \"cross reference\" and a \"classification product link\".",        "properties": {          "contextLocal": {            "type": "boolean",            "description": "Indicates whether the reference is set locally or inherited from a dimension point / a combination dimension points different from the ones used for current context. Should not be supplied for reference updates. If supplied with the value \"false\", the update will be skipped.",            "readOnly": true          },          "inherited": {            "type": "boolean",            "description": "Indicates whether the reference entry is inherited from parent node.",            "readOnly": true          },          "target": {            "type": "string",            "description": "ID of the target object"          },          "targetType": {            "type": "string",            "description": "Target \"supertype\"",            "readOnly": true,            "enum": [              "product",              "classification",              "asset",              "entity"            ]          },          "values": {            "type": "object",            "description": "Reference metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          },          "entity": {            "description": "The encapsulating reference should point to the specified entity. Only supported by find-similar and match-and-merge and the targetType of the reference must be entity. The embedded entity should be denoted by source information, i.e. it should have a source relation where source system id and source record id is known to originator of the JSON request. The supplied source information will be used for looking up actual target record of the encapsulating relation. Cannot be applied together with target id.",            "additionalProperties": {              "$ref": "#/components/schemas/Entity"            }          }        }      },      "ReferenceMetadataCondition": {        "type": "object",        "description": "An \"abstract\" representation of a condition that can be used to match reference metadata. Must always either be an AndCondition, an OrCondition, a TextValueCondition, a NumericValueCondition, or an LovValueCondition. Notice that conditions nested in compound conditions must also be valid reference metadata conditions.",        "oneOf": [          {            "$ref": "#/components/schemas/AndCondition"          },          {            "$ref": "#/components/schemas/OrCondition"          },          {            "$ref": "#/components/schemas/TextValueCondition"          },          {            "$ref": "#/components/schemas/NumericValueCondition"          },          {            "$ref": "#/components/schemas/LovValueCondition"          }        ]      },      "ReferenceType": {        "type": "object",        "description": "A reference type object. Can represent both \"cross reference types\" and \"classification product link types\".",        "properties": {          "id": {            "type": "string",            "description": "ID of the reference type object",            "readOnly": true          },          "name": {            "type": "string",            "description": "Reference type name"          },          "productClassificationLinkType": {            "type": "boolean",            "description": "Boolean indication of whether the type is a \"classification product link type\" as opposed to a \"cross reference type\""          },          "multivalued": {            "type": "boolean",            "description": "Boolean indication of whether multiple references / links from a single source are allowed. Notice that a \"classification product link type\" always will be multivalued when seen from the classification side."          },          "validSourceObjectTypes": {            "type": "array",            "description": "IDs of the valid source object types",            "items": {              "type": "string"            }          },          "validTargetObjectTypes": {            "type": "array",            "description": "IDs of the valid target object types",            "items": {              "type": "string"            }          },          "values": {            "type": "object",            "description": "Reference type metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "SimpleBelowCondition": {        "type": "object",        "description": "Simple below query condition",        "required": ["conditionType", "topNodeId", "topNodeType"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"simplebelow\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "topNodeId": {            "type": "string",            "description": "ID of the node to match results below"          }        ,          "topNodeType": {            "type": "string",            "description": "Type of node to match results below",            "enum": [              "classification",              "entity",              "product"            ]          }        }      },      "SingleDataContainer": {        "type": "object",        "description": "A data container for a single-valued data container type",        "properties": {          "dataContainer": {            "$ref": "#/components/schemas/DataContainerEntry"          },          "inherited": {            "type": "boolean",            "description": "Indicates whether the datacontainer is inherited from parent node.",            "readOnly": true          }        },        "additionalProperties": false      },      "SingleReference": {        "type": "object",        "description": "A reference for a single-valued reference type. Covers both \"cross references\" and \"classification product links\".",        "properties": {          "reference": {            "$ref": "#/components/schemas/ReferenceEntry"          }        },        "additionalProperties": false      },      "SingleValue": {        "type": "object",        "description": "A value for a single-valued attribute",        "properties": {          "calculated": {            "type": "boolean",            "description": "Indicates whether the value is calculated. Should not be supplied for value updates. If supplied with the value \"true\", the update of the specific value will be skipped.",            "readOnly": true          },          "contextLocal": {            "type": "boolean",            "description": "Indicates whether the value is set locally or inherited from a dimension point / a combination dimension points different from the ones used for current context. Should not be supplied for value updates. If supplied with the value \"false\", the update of the specific value will be skipped.",            "readOnly": true          },          "inherited": {            "type": "boolean",            "description": "Indicates whether the value is inherited from parent node.",            "readOnly": true          },          "value": {            "$ref": "#/components/schemas/ValueEntry"          }        },        "additionalProperties": false      },	    "User": {	      "type": "object",	      "description": "A user of the STEP system. A user can be part of several Groups and will inherit privileges from these Groups so that the privileges of a User becomes the super set of privileges inherited from the Groups that have the User as a member.",	      "properties": {	        "id": {	          "type": "string",	          "description": "ID of the User object",	          "readOnly": true	        },	        "name": {	          "type": "string",	          "description": "User name"	        },	        "email": {	          "type": "string",	          "description": "E-mail of the user"	        },	        "values": {	          "type": "object",	          "description": "User values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",	          "additionalProperties": {	            "$ref": "#/components/schemas/Value"	          }	        },	        "userGroups": {	          "type": "array",	          "description": "IDs of groups having this user as a member",	          "items": {	            "type": "string"	          }	        }	      }	    },	    "UserGroup": {	      "type": "object",	      "description": "Group of users with certain privileges",	      "properties": {	        "id": {	          "type": "string",	          "description": "ID of the Group object",	          "readOnly": true	        },	        "parentId": {	          "type": "string",	          "description": "ID of the parent user group of this user group"	        },	        "name": {	          "type": "string",	          "description": "User group name"	        },	        "vendorRoot": {	          "type": "string",	          "description": "Vendor classification associated with this user group. Updating user group with empty \"vendorRoot\" value removes existing vendor classification assignment."	        },	        "values": {	          "type": "object",	          "description": "User group values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",		      "additionalProperties": {		        "$ref": "#/components/schemas/Value"		      }	        }	      }	    },	    "UserGroupChangeRequest": {	      "type": "object",	      "description": "Message body used for adding and removing user from the user group",	      "properties": {	        "groupId": {	          "type": "string",	          "description": "ID of the user group"	        }	      }	    },      "WorkflowInstanceCreation": {        "type": "object",        "description": "Message body used for starting a workflow / creating an instance",        "properties": {          "node": {            "$ref": "#/components/schemas/WorkflowNode"          },          "message": {            "type": "string",            "description": "The message to submit while starting the workflow"          }        }      },      "StatusFlag": {        "type": "object",        "description": "A workflow task status flag",        "properties": {          "id": {            "type": "string",            "description": "The status flag ID"          },          "name": {            "type": "string",            "description": "The status flag name"          }        }      },      "TextValueCondition": {        "type": "object",        "description": "Text value query condition. This type of value condition can be used for all types of attributes.",        "required": ["conditionType", "attribute", "operator", "queryString"],        "properties": {          "conditionType": {            "type": "string",            "description": "The condition type. Must have the value \"textvalue\" for this type of condition.",            "enum": ["and", "or", "id", "name", "textvalue", "numericvalue", "objecttype", "simplebelow", "lovvalue", "hasreferenceto", "hasdatacontainerobject"]          },          "attribute": {            "type": "string",            "description": "Id of the attribute for which to match the value"          },          "operator": {            "type": "string",            "description": "The condition operator",            "enum": [              "like",              "eq",              "neq"            ]          },          "queryString": {            "type": "string",            "description": "The query string. When the \"like\" operator is used, the wildcards \"*\" (any number of characters) and \"?\" (single character) can be used in the query string. Wildcard characters can be escaped using \"\\\". I.e. like(\"\\\\?*\") will match values starting with a question mark. Notice that backslash character (\"\\\") needs to be escaped if searching for that character. Notice that queries starting with a wildcard typically will not perform well."          },          "matchInheritedValues": {            "type": "boolean",            "description": "Should the query match hierarchically inherited values",            "default": false          },          "ignoreCase": {            "type": "boolean",            "description": "Should the query be non-case sensitive",            "default": false          }        }      },      "TriggerWorkflowEvent": {        "type": "object",        "description": "Message body used for triggering a workflow event",        "properties": {          "event": {            "$ref": "#/components/schemas/WorkflowEvent"          },          "message": {            "type": "string",            "description": "The message to submit while triggering the event"          }        }      },      "Unit": {        "type": "object",        "description": "A unit object",        "properties": {          "id": {            "type": "string",            "description": "ID of the unit object"          },          "name": {            "type": "string",            "description": "Unit name"          },          "values": {            "type": "object",            "description": "Unit metadata values. Keys are attribute IDs and values either a SingleValue or a MultiValue depending on whether the attribute is multivalued.",            "additionalProperties": {              "$ref": "#/components/schemas/Value"            }          }        }      },      "Value": {        "type": "object",        "description": "An \"abstract\" representation of a value. Will always either be a SingleValue or a MultiValue depending on whether the attribute is multivalued.",        "oneOf": [          {            "$ref": "#/components/schemas/SingleValue"          },          {            "$ref": "#/components/schemas/MultiValue"          }        ]      },      "ValueEntry": {        "type": "object",        "description": "An atomic value. A value will consist of either a \"value\" alone, a \"valueId\" alone, a \"value\" and a \"unit\" or a \"value\", a \"valueId\" and a \"unit\". For writes, \"valueId\" takes precedence over \"value\" (and implicitly \"unit\") that will be ignored if \"valueId\" is supplied.",        "properties": {          "value": {            "type": "string",            "description": "The \"value\" part of the value"          },          "valueId": {            "type": "string",            "description": "Value ID to be used with list of values based attributes for which the list of values uses value IDs"          },          "unit": {            "type": "string",            "description": "Unit ID"          }        }      },      "Workflow": {        "type": "object",        "description": "Basic representation of a workflow",        "properties": {          "id": {            "type": "string",            "description": "The workflow ID"          },          "name": {            "type": "string",            "description": "The workflow name"          },          "validObjectTypes": {            "type": "array",            "description": "IDs of the object types for which this workflow is valid",            "items": {              "type": "string"            }          }        }      },      "WorkflowEvent": {        "type": "object",        "description": "A workflow event",        "properties": {          "id": {            "type": "string",            "description": "The event ID. Must/will be populated if 'anonymous' is 'false'."          },          "anonymous": {            "type": "boolean",            "description": "Indicates whether the event is anonymous. If 'false', an 'id' must/will be present. If 'true', a provided 'id' will be ignored."          }        }      },      "WorkflowInstance": {        "type": "object",        "description": "Basic representation of a workflow instance",        "properties": {          "id": {            "type": "string",            "description": "Workflow instance ID"          }        }      },      "WorkflowNode": {        "type": "object",        "description": "A node for which a workflow instance can exist",        "properties": {          "id": {            "type": "string",            "description": "The node ID"          },          "type": {            "type": "string",            "description": "Node supertype",            "enum": ["product", "classification", "asset", "entity", "attribute", "list_of_values"]          }        }      },      "WorkflowTask": {        "type": "object",        "description": "A workflow task",        "properties": {          "id": {            "type": "string",            "description": "The task ID"          },          "node": {            "$ref":"#/components/schemas/WorkflowNode"          },          "workflow": {            "type": "string",            "description": "ID of the workflow to which this task belongs"          },          "state": {            "type": "string",            "description": "ID of the workflow state for this task"          },          "userAssignee": {            "type": "string",            "description": "ID of the user to which this task is assigned. Will be null if task is assigned to a user group in which case 'groupAssignee' will be populated."          },          "groupAssignee": {            "type": "string",            "description": "ID of the user group to which this task is assigned. Will be null if task is assigned to a user in which case 'userAssignee' will be populated."          },          "deadline": {            "type": "string",            "description": "Deadline for this task in yyyy-mm-ddThh:mm:ss&#177hh:mm format. Null if no deadline."          },          "statusFlag": {            "$ref":"#/components/schemas/StatusFlag"          },          "taskCreationTime": {            "type": "string",            "description": "Time that the task was created in yyyy-mm-ddThh:mm:ss&#177hh:mm format"          },          "instance": {            "type": "string",            "description": "Instance ID"          }        }      },      "WorkflowTaskQuery": {        "type": "object",        "description": "A workflow task query specification. All properties are optional query filters. If no values are supplied, the query will match all tasks assigned to the user executing the query and tasks assigned to groups that the user is a member of.",        "properties": {          "node": {            "$ref":"#/components/schemas/WorkflowNode"          },          "workflow": {            "type": "string",            "description": "Optional workflow filter. Can be populated with workflow ID."          },          "state": {            "type": "string",            "description": "Optional state filter. Can be populated with state ID."          },          "statusFlag": {            "type": "string",            "description": "Optional status flag filter. Can be populated with status flag ID."          },          "directAssignment": {            "type": "boolean",            "description": "If 'true', the query will match only tasks assigned directly to the user invoking the operation. If 'false', the query will match both tasks assigned directly to the user and tasks assigned to a group that the user is a member of.",            "default": false          },          "includeNonLeafTasks": {            "type": "boolean",            "description": "If 'true', the query will match tasks for 'parallels' and 'clusters' in addition to 'leaf tasks'",            "default": false          }        }      }    },    "securitySchemes": {  "basicAuth": {    "type": "http",    "scheme": "basic"  },  "bearerAuth": {    "type": "http",    "scheme": "bearer"  }}}}